import{_ as a,r as t,o as p,c as o,a as n,b as e,d as c,e as l}from"./app-COjMlnxi.js";const u={},i=l(`<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>Javascript事件流是指在HTML文档中，事件的传播过程，即事件从触发元素向上或向下传递的路径。 DOM事件流包括3个阶段：</p><ol><li>事件捕获阶段：事件开始时由顶层对象（通常是document对象）接收，然后向下传递到目标节点的过程</li><li>处于目标事件阶段</li><li>事件冒泡阶段</li></ol><h2 id="javascript事件机制dom事件" tabindex="-1"><a class="header-anchor" href="#javascript事件机制dom事件"><span>Javascript事件机制DOM事件</span></a></h2><h3 id="dom0-原生事件模型" tabindex="-1"><a class="header-anchor" href="#dom0-原生事件模型"><span>DOM0（原生事件模型）</span></a></h3><pre><code class="language-js"><span class="token comment">// 绑定方案一</span>
<span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">&quot;btnClick1()&quot;</span> onclick<span class="token operator">=</span><span class="token string">&quot;btnClick2()&quot;</span><span class="token operator">&gt;</span>click me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">&quot;btnClick1()&quot;</span> onclick<span class="token operator">=</span><span class="token string">&quot;btnClick2()&quot;</span><span class="token operator">&gt;</span>click me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">function</span> <span class="token function">btnClick1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;click!1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">btnClick2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;click!2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

<span class="token comment">// 绑定方案二</span>
<span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn&quot;</span><span class="token punctuation">)</span>
btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token comment">// 清理事件</span>
btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre><p>特点：同一个元素绑定相同事件，后者会覆盖前者，不存在兼容性问题 事件流只有两个阶段：处于目标事件和捕获阶段</p><h3 id="dom2-标准事件模型" tabindex="-1"><a class="header-anchor" href="#dom2-标准事件模型"><span>DOM2（标准事件模型）</span></a></h3><p>事件监听绑定：addEventListener / removeEventListener（避免内存泄漏）</p><pre><code class="language-js"><span class="token comment">// 第三个参数true：表示事件在捕获阶段进行，false：事件在冒泡阶段进行（默认），先绑定先执行</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>， <span class="token boolean">true</span><span class="token punctuation">)</span> 

btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>， <span class="token boolean">true</span><span class="token punctuation">)</span> 
</code></pre><p>特点：如果绑定了同一元素绑定了多个click 事件，都会执行，并且有先后顺序 事件流包括三个阶段：事件捕获(capturing phase)、目标事件(target phase)、事件冒泡(bubbling phase)</p><h2 id="dom3" tabindex="-1"><a class="header-anchor" href="#dom3"><span>DOM3</span></a></h2><pre><code class="language-js"><span class="token constant">DOM3</span>级事件在<span class="token constant">DOM2</span>级事件的基础上添加了更多的事件类型，全部类型如下：
<span class="token constant">UI</span>事件，当用户与页面上的元素交互时触发，如：load、scroll
焦点事件，当元素获得或失去焦点时触发，如：blur、focus
鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup
滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel
文本事件，当在文档中输入文本时触发，如：textInput
键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress
合成事件，当为<span class="token constant">IME</span>（输入法编辑器）输入字符时触发，如：compositionstart
变动事件，当底层<span class="token constant">DOM</span>结构发生变化时触发，如：DOMsubtreeModified
同时<span class="token constant">DOM3</span>级事件也允许使用者自定义一些事件。
</code></pre><h3 id="ie事件模型" tabindex="-1"><a class="header-anchor" href="#ie事件模型"><span>IE事件模型</span></a></h3><p>IE事件监听绑定：attachEvent / detachEvent（避免内存泄漏） 特点： 事件流只有处于目标事件和冒泡事件</p><pre><code class="language-js">btn<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&#39;onclick&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 如果同一元素绑定了多个click 事件，都会执行，后绑定先执行。</span>

btn<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">&#39;onclick&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

e<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 阻止事件冒泡</span>
e<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 阻止默认事件</span>
</code></pre><h2 id="阻止默认事件" tabindex="-1"><a class="header-anchor" href="#阻止默认事件"><span>阻止默认事件</span></a></h2><p>event.stopPropagation(): 阻止父类冒泡 event.stopImmediatePropagation(): 阻止父类冒泡及当前节点的同类事件 event.preventDefault(): 阻止默认事件，例如点击一个链接（a标签），可以阻止跳转的行为</p><h2 id="事件委托-代理" tabindex="-1"><a class="header-anchor" href="#事件委托-代理"><span>事件委托（代理）</span></a></h2><p>事件代理（也称为事件委托）是一种常用的前端开发技术，通过将事件处理程序绑定到父元素而不是每个子元素上，来管理事件。当子元素触发事件时，事件会冒泡到父元素，然后在父元素上触发事件处理程序。好处包括：</p><ul><li>性能优化：减少了添加事件处理程序的次数，节省了内存和提高了性能。特别是在需要管理大量子元素时，使用事件代理可以显著减少内存消耗和页-面加载时间。</li><li>动态元素：对于动态添加的子元素，使用事件代理可以确保这些新元素也能受到事件处理程序的控制，而无需重新绑定事件。</li><li>代码简洁：通过将事件处理程序绑定到共同的父元素上，可以减少重复的代码量，提高代码的可维护性。</li></ul><pre><code class="language-js"><span class="token comment">// 父元素</span>
<span class="token keyword">const</span> parentElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;parent&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 事件代理</span>
parentElement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">&#39;LI&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 假设子元素是 li 元素</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;子元素被点击:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="实现多浏览器的兼容事件绑定-兼容ie的事件监听" tabindex="-1"><a class="header-anchor" href="#实现多浏览器的兼容事件绑定-兼容ie的事件监听"><span>实现多浏览器的兼容事件绑定（兼容IE的事件监听）</span></a></h2><p>思路：采用addEventListener &amp;&amp; attachEvent</p><pre><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">bindEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> element
    <span class="token punctuation">}</span>
    <span class="token function-variable function">addEventListener</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element
            <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&#39;on&#39;</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">handle</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">[</span><span class="token string">&#39;on&#39;</span> <span class="token operator">+</span> type<span class="token punctuation">]</span> <span class="token operator">=</span> handler
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">removeEventListener</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>removeEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>detachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element
            <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">&#39;on&#39;</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">handle</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">[</span><span class="token string">&#39;on&#39;</span> <span class="token operator">+</span> type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>preventDefault<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="target与currenttarget区别" tabindex="-1"><a class="header-anchor" href="#target与currenttarget区别"><span>target与currentTarget区别</span></a></h2><p>target：指的是目标阶段。 currentTarget：指的是捕获阶段，目标阶段和冒泡阶段。（一般指目标元素的父级）</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,28),k={href:"https://juejin.cn/post/7232726594208383035?searchId=202409041609498648DF073164181733E0",target:"_blank",rel:"noopener noreferrer"};function r(d,h){const s=t("ExternalLinkIcon");return p(),o("div",null,[i,n("p",null,[n("a",k,[e("一文带你吃透【JS事件流】"),c(s)])])])}const g=a(u,[["render",r],["__file","domshijian.html.vue"]]),f=JSON.parse('{"path":"/blogs/technology/JS/domshijian.html","title":"DOM事件","lang":"en-US","frontmatter":{"title":"DOM事件","date":"2024/07/01","tags":["javascript"],"categories":["javascript"]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"Javascript事件机制DOM事件","slug":"javascript事件机制dom事件","link":"#javascript事件机制dom事件","children":[{"level":3,"title":"DOM0（原生事件模型）","slug":"dom0-原生事件模型","link":"#dom0-原生事件模型","children":[]},{"level":3,"title":"DOM2（标准事件模型）","slug":"dom2-标准事件模型","link":"#dom2-标准事件模型","children":[]}]},{"level":2,"title":"DOM3","slug":"dom3","link":"#dom3","children":[{"level":3,"title":"IE事件模型","slug":"ie事件模型","link":"#ie事件模型","children":[]}]},{"level":2,"title":"阻止默认事件","slug":"阻止默认事件","link":"#阻止默认事件","children":[]},{"level":2,"title":"事件委托（代理）","slug":"事件委托-代理","link":"#事件委托-代理","children":[]},{"level":2,"title":"实现多浏览器的兼容事件绑定（兼容IE的事件监听）","slug":"实现多浏览器的兼容事件绑定-兼容ie的事件监听","link":"#实现多浏览器的兼容事件绑定-兼容ie的事件监听","children":[]},{"level":2,"title":"target与currentTarget区别","slug":"target与currenttarget区别","link":"#target与currenttarget区别","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1719836602000,"updatedTime":1725440342000,"contributors":[{"name":"zhuxiaoying","email":"zhuxiaoying@meituan.com","commits":4}]},"filePathRelative":"blogs/technology/JS/dom事件.md"}');export{g as comp,f as data};
