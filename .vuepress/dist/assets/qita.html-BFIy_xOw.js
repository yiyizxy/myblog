import{_ as n,o as s,c as a,e as o}from"./app-COjMlnxi.js";const e={},t=o(`<h2 id="mvvm、mvc、mvp的区别" tabindex="-1"><a class="header-anchor" href="#mvvm、mvc、mvp的区别"><span>MVVM、MVC、MVP的区别</span></a></h2><p>MVC、MVP 和 MVVM 是三种常见的软件架构设计模式，主要通过分离 关注点的方式来组织代码结构，优化开发效率。 在开发单页面应用时，往往一个路由页面对应了一个脚本文件，所有 的页面逻辑都在一个脚本文件里。页面的渲染、数据的获取，对用户 事件的响应所有的应用逻辑都混合在一起，这样在开发简单项目时， 可能看不出什么问题，如果项目变得复杂，那么整个文件就会变得冗 长、混乱，这样对项目开发和后期的项目维护是非常不利的。</p><p>(1)MVC MVC 通过分离 Model、View 和 Controller 的方式来组织代码结构。 其中 View 负责页面的显示逻辑，Model 负责存储页面的业务数据， 以及对相应数据的操作。并且 View 和 Model 应用了观察者模式， 当 Model 层发生改变的时候它会通知有关 View 层更新页面Controller 层是 View 层和 Model 层的纽带，它主要负责用户与应 用的响应操作，当用户与页面产生交互的时候，Controller 中的事 件触发器就开始工作了，通过调用 Model 层，来完成对 Model 的修 改，然后 Model 层再去通知 View 层更新。</p><p>(2)MVVM MVVM 分为 Model、View、ViewModel: Model 代表数据模型，数据和业务逻辑都在 Model 层中定义; View 代表 UI 视图，负责数据的展示; ViewModel 负责监听 Model 中数据的改变并且控制视图的更新，处理 用户交互操作; Model 和 View 并无直接关联，而是通过 ViewModel 来进行联系的， Model 和 ViewModel 之间有着双向数据绑定的联系。因此当 Model 中 的数据改变时会触发 View 层的刷新，View 中由于用户交互操作而改变的数据也会在 Model 中同步。 这种模式实现了 Model 和 View 的数据自动同步，因此开发者只需要 专注于数据的维护操作即可，而不需要自己操作 DOM。</p><p>(3)MVP MVP 模式与 MVC 唯一不同的在于 Presenter 和 Controller。在 MVC 模式中使用观察者模式，来实现当 Model 层数据发生变化的时 候，通知 View 层的更新。这样 View 层和 Model 层耦合在一起， 当项目逻辑变得复杂的时候，可能会造成代码的混乱，并且可能会对 代码的复用性造成一些问题。MVP 的模式通过使用 Presenter 来实 现对 View 层和 Model 层的解耦。MVC 中的 Controller 只知道 Model 的接口，因此它没有办法控制 View 层的更新，MVP 模式中， View 层的接口暴露给了 Presenter 因此可以在 Presenter 中将 Model 的变化和 View 的变化绑定在一起，以此来实现 View 和 Model 的同步更新。这样就实现了对 View 和 Model 的解耦， Presenter 还包含了其他的响应逻辑。</p><h2 id="commonjs和esmodule区别" tabindex="-1"><a class="header-anchor" href="#commonjs和esmodule区别"><span>commonjs和esmodule区别</span></a></h2><ul><li>commonJs是运行时加载，esModule是编译时运行</li><li>commonJs输出的是值的拷贝，esModule输出的是值的引用</li><li>esmodule是静态语法必须写在顶层，而commonjs是动态语法可以写在判断里</li><li>esmodule的this是undefine,而commonjs的this是当前模块</li><li>esmodue可以到处多个值，而commonjs是单个值导出</li></ul><pre><code class="language-js"><span class="token comment">// commonjs输出值拷贝</span>
<span class="token doc-comment comment">/*************** a.js**********************/</span>
<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
exports<span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span> <span class="token comment">// 输出值的拷贝</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">//这里改变count值，并不会将module.exports对象的count属性值改变</span>
    count<span class="token operator">++</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/*************** b.js**********************/</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> count<span class="token punctuation">,</span> add <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./a.js&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//在支持es6模块的环境下等同于</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> count<span class="token punctuation">,</span> add <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a.js&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token comment">//0</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token comment">//0</span>
</code></pre><pre><code class="language-js"><span class="token comment">// esmodule输出值引用</span>
<span class="token doc-comment comment">/*************** a.js**********************/</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//输出的是值的引用，指向同一块内存</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//此时引用指向的内存值发生改变</span>
<span class="token punctuation">}</span>


<span class="token doc-comment comment">/*************** b.js**********************/</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> count<span class="token punctuation">,</span> add <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a.js&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token comment">//0</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token comment">//1</span>
</code></pre><h2 id="es模块中export出去的对象能被修改么" tabindex="-1"><a class="header-anchor" href="#es模块中export出去的对象能被修改么"><span>ES模块中export出去的对象能被修改么？</span></a></h2><p>在ES模块中，export出去的对象默认是只读的，不能被修改。当一个对象被导出后，在其他模块中引入该对象时，只能读取其属性和方法，而不能修改它们。</p><h2 id="esmodule和commonjs分别是如何处理循环引用的" tabindex="-1"><a class="header-anchor" href="#esmodule和commonjs分别是如何处理循环引用的"><span>ESModule和CommonJS分别是如何处理循环引用的？</span></a></h2><p>ESModule:ES模块对循环引用有着严格的限制，当发生循环引用时，ES模块会将被引用的模块视为尚未准备好，因此会导致循环引用的模块导出一个空的对象或空值 CommonJS:在处理循环引用时更为宽松，它会在加载模块时记录模块的导出值，即使发生循环引用也不会导致问题。CommonJS模块系统允许循环引用中的模块导出部分已经准备好的值</p>`,13),p=[t];function c(l,u){return s(),a("div",null,p)}const m=n(e,[["render",c],["__file","qita.html.vue"]]),r=JSON.parse('{"path":"/blogs/technology/kuangjia/qita.html","title":"其他","lang":"en-US","frontmatter":{"title":"其他","date":"2024/07/06","tags":["框架"],"categories":["框架"]},"headers":[{"level":2,"title":"MVVM、MVC、MVP的区别","slug":"mvvm、mvc、mvp的区别","link":"#mvvm、mvc、mvp的区别","children":[]},{"level":2,"title":"commonjs和esmodule区别","slug":"commonjs和esmodule区别","link":"#commonjs和esmodule区别","children":[]},{"level":2,"title":"ES模块中export出去的对象能被修改么？","slug":"es模块中export出去的对象能被修改么","link":"#es模块中export出去的对象能被修改么","children":[]},{"level":2,"title":"ESModule和CommonJS分别是如何处理循环引用的？","slug":"esmodule和commonjs分别是如何处理循环引用的","link":"#esmodule和commonjs分别是如何处理循环引用的","children":[]}],"git":{"createdTime":1720346229000,"updatedTime":1725607239000,"contributors":[{"name":"zhuxiaoying","email":"zhuxiaoying@meituan.com","commits":4}]},"filePathRelative":"blogs/technology/框架/其他.md"}');export{m as comp,r as data};
