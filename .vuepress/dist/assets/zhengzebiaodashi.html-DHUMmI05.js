import{_ as a,r as t,o as e,c as p,a as n,b as o,d as c,e as l}from"./app-BcWTENpX.js";const u={},k=l(`<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>正则表达式是一种由字符和操作符组成的字符串模式，用于匹配一系列字符串</p><h3 id="_1-字面量字符和字符类" tabindex="-1"><a class="header-anchor" href="#_1-字面量字符和字符类"><span>1.字面量字符和字符类</span></a></h3><p>字面量字符直接匹配文本中的字符，而字符类使用方括号 [] 来匹配其中任意一个字符。</p><p>*<strong>字面量字符用法举例:</strong></p><pre><code class="language-js"><span class="token keyword">const</span> regexLiteral <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//匹配含有&#39;hello&#39;的字符</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regexLiteral<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regexLiteral<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;hi there&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// false</span>
</code></pre><p>*<strong>字符类用法举例：</strong></p><pre><code class="language-js"><span class="token keyword">const</span> regexCharacterClass <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[aeiou]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//匹配包含&#39;aeiou&#39;中任意一个的字符</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regexCharacterClass<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regexCharacterClass<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><h3 id="_2-元字符" tabindex="-1"><a class="header-anchor" href="#_2-元字符"><span>2. 元字符</span></a></h3><p>元字符是具有特殊含义的字符，常见的元字符包括.、^、$、*、+、?、|等。</p><pre><code class="language-js"><span class="token punctuation">.</span>       <span class="token comment">// 匹配除换行符以外的任意一个字符</span>
<span class="token operator">^</span>       <span class="token comment">// 匹配字符串的开始</span>
$       <span class="token comment">// 匹配字符串的结束</span>
\\d      <span class="token comment">// 匹配任意数字（相当于 [0-9]）</span>
\\w      <span class="token comment">// 匹配任意字母、数字、下划线（相当于 [a-zA-Z0-9_]）</span>
\\s      <span class="token comment">// 匹配任意空白字符</span>
</code></pre><p>*<strong>例子</strong></p><pre><code class="language-js"><span class="token keyword">const</span> regexDot <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a.b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regexDot<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;acb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regexDot<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;a\\nb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>


<span class="token keyword">const</span> regexStartEnd <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^hello$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//匹配&#39;hello&#39;，多一点少一点都不行</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regexStartEnd<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regexStartEnd<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regexStartEnd<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;hi hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><h3 id="_3-量词" tabindex="-1"><a class="header-anchor" href="#_3-量词"><span>3. 量词</span></a></h3><p>量词用于指定匹配次数，包括{n}、{n,}、{n,m}。量词用于指定匹配次数，例如{n}表示匹配恰好n次，{n,} 表示至少匹配n次，{n,m} 表示匹配次数在n和m之间。例如：</p><pre><code class="language-js">a<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span>    <span class="token comment">// 匹配连续出现3次的字符 &#39;a&#39;</span>
\\d<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span> <span class="token comment">// 匹配连续出现2到4次的数字</span>
</code></pre><p>*<strong>例子</strong></p><pre><code class="language-js"><span class="token keyword">const</span> regexQuantifier <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{3}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//匹配至少连续出现三次数字的字符</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regexQuantifier<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regexQuantifier<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;4567&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regexQuantifier<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;12&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// false</span>

</code></pre><h3 id="_4-分组" tabindex="-1"><a class="header-anchor" href="#_4-分组"><span>4. 分组</span></a></h3><p>使用圆括号()表示一个组，可以对组内的内容进行分组和捕获。例如：</p><pre><code class="language-js"><span class="token punctuation">(</span>\\d<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>\\d<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>\\d<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">// 捕获日期中的年、月、日</span>
</code></pre><p>*<strong>举例：</strong></p><pre><code class="language-js"><span class="token keyword">const</span> regexGroup <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{2})-(\\d{2})-(\\d{4})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token string">&quot;01-16-2022&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> match <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regexGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;01&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;16&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;2022&quot;</span>
</code></pre><h2 id="常用正则表达式" tabindex="-1"><a class="header-anchor" href="#常用正则表达式"><span>常用正则表达式</span></a></h2><pre><code class="language-js"><span class="token comment">// 手机号</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1[345678]\\d{9}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token comment">// 十六进制色值</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">#[0-9a-fA-F]{6}|[0-9a-fA-F]{3}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token comment">// 日期，如yyyy-mm-dd</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\\d{4})-(0[1-9]｜1[0-2])-(0[1-9]|[12][0-9]|3[01])$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token comment">// qq号</span>
<span class="token keyword">const</span> regx <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[1-9][0-9]{4,10}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token comment">// 密码验证必须包含大写，小写和数字,和特殊字符(!,@,#,%,&amp;),且大于6位</span>
<span class="token keyword">const</span> regx <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[!@#%&amp;])^[A-Za-z\\d!@#%&amp;]{6,}$</span><span class="token regex-delimiter">/</span></span>
</code></pre><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,26),r={href:"https://juejin.cn/post/7324522555268513807?searchId=20240707144851E87D114BD6885960D619",target:"_blank",rel:"noopener noreferrer"};function i(g,m){const s=t("ExternalLinkIcon");return e(),p("div",null,[k,n("p",null,[n("a",r,[o("浅谈正则表达式"),c(s)])])])}const x=a(u,[["render",i],["__file","zhengzebiaodashi.html.vue"]]),h=JSON.parse('{"path":"/blogs/technology/JS/zhengzebiaodashi.html","title":"正则表达式","lang":"en-US","frontmatter":{"title":"正则表达式","date":"2024/07/07","tags":["javascript"],"categories":["javascript"]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[{"level":3,"title":"1.字面量字符和字符类","slug":"_1-字面量字符和字符类","link":"#_1-字面量字符和字符类","children":[]},{"level":3,"title":"2. 元字符","slug":"_2-元字符","link":"#_2-元字符","children":[]},{"level":3,"title":"3. 量词","slug":"_3-量词","link":"#_3-量词","children":[]},{"level":3,"title":"4. 分组","slug":"_4-分组","link":"#_4-分组","children":[]}]},{"level":2,"title":"常用正则表达式","slug":"常用正则表达式","link":"#常用正则表达式","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1720346229000,"updatedTime":1720346229000,"contributors":[{"name":"zhuxiaoying","email":"zhuxiaoying@meituan.com","commits":1}]},"filePathRelative":"blogs/technology/JS/正则表达式.md"}');export{x as comp,h as data};
