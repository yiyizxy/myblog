import{_ as n,o as s,c as a,e as t}from"./app-BcWTENpX.js";const p={},o=t(`<h2 id="cli相关" tabindex="-1"><a class="header-anchor" href="#cli相关"><span>cli相关</span></a></h2><h3 id="_1-处理依赖" tabindex="-1"><a class="header-anchor" href="#_1-处理依赖"><span>1.处理依赖</span></a></h3><p><code>path</code>: 处理路径</p><p><code>chalk</code> 作用:用于在终端中设置文本样式 主要功能 文本颜色：设置文本的前景色，如红色、绿色、蓝色等。 背景颜色：设置文本的背景色。 文本样式：设置文本的样式，如粗体、下划线、斜体等。 组合样式：可以组合多种样式应用于同一段文本。</p><pre><code class="language-js"><span class="token keyword">const</span> chalk <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;chalk&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">red</span><span class="token punctuation">(</span><span class="token string">&#39;This is a red text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">bgRed</span><span class="token punctuation">(</span><span class="token string">&#39;This text has a red background&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token string">&#39;This is bold text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">blue</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> chalk<span class="token punctuation">.</span>red<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token string">&#39;World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><p><code>fs-extra</code> 作用：是一个基于 Node.js内置的 fs 模块的增强版，提供了更多实用的文件系统操作方法 主要功能 文件和目录的复制：递归复制文件和目录。 文件和目录的移动：递归移动文件和目录。 文件和目录的删除：递归删除文件和目录。 创建目录：递归创建目录。 读取和写入 JSON 文件：简化 JSON 文件的读写操作。 确保文件和目录存在：确保文件或目录存在，如果不存在则创建它们。</p><pre><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs-extra&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 递归复制文件或目录</span>
fs<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token string">&#39;/path/to/source&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/path/to/destination&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Copy completed!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 确保文件存在</span>
fs<span class="token punctuation">.</span><span class="token function">ensureFile</span><span class="token punctuation">(</span><span class="token string">&#39;/path/to/file.txt&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;File ensured!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><p><code>inquirer</code> 作用:用于在命令行界面（CLI）中与用户进行交互的Node.js库 主要功能</p><ul><li>创建交互式提示：支持多种类型的提示，包括输入、确认、单选、多选等。</li><li>自定义提示：允许自定义提示的行为和外观。</li><li>异步操作支持：可以在提示过程中进行异步操作，如从服务器获取数据。</li><li>验证和过滤：支持对用户输入进行验证和过滤。</li></ul><p><code>commander</code> 作用：一个用于构建命令行接口（CLI）应用的Node.js库 主要功能 命令定义：定义和处理多个命令，每个命令可以有自己的选项和参数。 选项解析：支持短选项（如 -p）和长选项（如 --port），并且可以为选项指定默认值。 参数解析：解析命令行参数，并将其传递给相应的命令处理函数。 自动生成帮助信息：自动生成并显示命令和选项的帮助信息。 全局选项：支持全局选项，这些选项可以在所有命令中使用。</p><pre><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> Command <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;commander&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> program <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

program
  <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&#39;my-cli-tool&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&#39;An example CLI tool&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&#39;1.0.0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

program
  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&#39;serve&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&#39;Start the server&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-p, --port &lt;number&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Port to run the server on&#39;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Server is running on port </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>options<span class="token punctuation">.</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

program
  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&#39;build&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&#39;Build the project&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-o, --output &lt;directory&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Output directory&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Building the project to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>options<span class="token punctuation">.</span>output<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

program<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>

</code></pre><p><code>download-git-repo</code>:</p><h3 id="_2-处理工程入口" tabindex="-1"><a class="header-anchor" href="#_2-处理工程入口"><span>2.处理工程入口</span></a></h3><pre><code class="language-js"><span class="token comment">// 1.初始化npm</span>
npm init

<span class="token comment">// 2.新建主命令</span>
新建bin<span class="token operator">/</span>index<span class="token punctuation">.</span>js文件 <span class="token operator">+</span> <span class="token keyword">package</span><span class="token punctuation">.</span>json里配置bin入口
<span class="token comment">// #! /usr/bin/env node</span>

<span class="token comment">// 3.关联主命令与配置项</span>
npm link

<span class="token comment">// 4.执行主命令即可关联逻辑内容</span>
<span class="token comment">// yiyizxy-cli</span>
</code></pre><h3 id="_3-加入交互命令" tabindex="-1"><a class="header-anchor" href="#_3-加入交互命令"><span>3.加入交互命令</span></a></h3><pre><code class="language-js">
program
  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&#39;create &lt;app-name&gt;&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&#39;create a new project&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token string">&#39;-f, --force&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;overwrite target directory if it exist&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span><span class="token punctuation">)</span>

propgram<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argvs<span class="token punctuation">)</span>

</code></pre><p><code>npm-run-all</code>: 用于并行或串行运行多个 npm script 的工具包</p><p>都是改变this指向和函数的调用，call和apply功能类似，只是传参不同</p>`,18),c=[o];function e(u,l){return s(),a("div",null,c)}const k=n(p,[["render",e],["__file","clichangyonggongju.html.vue"]]),r=JSON.parse('{"path":"/blogs/technology/kuangjia/clichangyonggongju.html","title":"cli常用工具","lang":"en-US","frontmatter":{"title":"cli常用工具","date":"2024/07/16","tags":["框架"],"categories":["框架"]},"headers":[{"level":2,"title":"cli相关","slug":"cli相关","link":"#cli相关","children":[{"level":3,"title":"1.处理依赖","slug":"_1-处理依赖","link":"#_1-处理依赖","children":[]},{"level":3,"title":"2.处理工程入口","slug":"_2-处理工程入口","link":"#_2-处理工程入口","children":[]},{"level":3,"title":"3.加入交互命令","slug":"_3-加入交互命令","link":"#_3-加入交互命令","children":[]}]}],"git":{"createdTime":1721137854000,"updatedTime":1721214190000,"contributors":[{"name":"zhuxiaoying","email":"zhuxiaoying@meituan.com","commits":2}]},"filePathRelative":"blogs/technology/框架/cli常用工具.md"}');export{k as comp,r as data};
