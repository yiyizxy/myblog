import{_ as a,r as t,o as p,c as e,a as n,b as o,d as c,e as l}from"./app-COjMlnxi.js";const u={},i=l(`<p>重排一定会导致重绘，重绘不一定会导致重排</p><h2 id="重绘" tabindex="-1"><a class="header-anchor" href="#重绘"><span>重绘</span></a></h2><p>指浏览器根据元素的样式和内容重新绘制元素的过程。当元素的样式发生变化，但是不影响其几何属性（如颜色、背景等），就会触发重绘。</p><h3 id="哪些操作会发生重绘" tabindex="-1"><a class="header-anchor" href="#哪些操作会发生重绘"><span>哪些操作会发生重绘</span></a></h3><ul><li>元素的样式发生变化，例如颜色（color）、背景（background）、阴影、圆角（border-radius）、边框样式（border-style）</li><li>元素的可见性发生变化（如隐藏、显示）</li><li>使用CSS3过渡或动画效果等</li></ul><h2 id="重排" tabindex="-1"><a class="header-anchor" href="#重排"><span>重排</span></a></h2><p>指浏览器计算元素的位置和几何结构的过程。当页面上的部分或全部内容发生变化，需要重新计算元素的几何属性（如尺寸、位置、布局等）时，就会触发回流。重新排列元素，生成布局，例如修改元素的宽高</p><h3 id="哪些操作会发生重排" tabindex="-1"><a class="header-anchor" href="#哪些操作会发生重排"><span>哪些操作会发生重排</span></a></h3><ul><li>页面初始渲染</li><li>添加/删除DOM</li><li>改变元素位置</li><li>改变元素大小，例如宽度、高度、边框、边距、填充</li><li>改变字体大小</li><li>浏览器窗口尺寸改变-resize事件发生</li></ul><h2 id="重排影响范围" tabindex="-1"><a class="header-anchor" href="#重排影响范围"><span>重排影响范围</span></a></h2><p>全局布局：从根节点html开始对整个渲染树进行重新布局 局部布局：对渲染树的某部分或某一个渲染对象进行重新布局</p><h3 id="优化方案" tabindex="-1"><a class="header-anchor" href="#优化方案"><span>优化方案</span></a></h3><p>思路：减少重排次数和减小重排范围</p><ul><li>样式集中改变(减少重排次数)</li></ul><pre><code class="language-html"><span class="token comment">&lt;!-- html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  我是demo
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><pre><code class="language-javascript"><span class="token comment">// renderEle.style 逐个添加/修改属性值</span>
<span class="token keyword">const</span> renderEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">)</span>
renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span> <span class="token comment">// 导致重绘</span>
renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background<span class="token operator">=</span> <span class="token string">&#39;#ccc&#39;</span> <span class="token comment">// 导致重绘</span>
renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>padding <span class="token operator">=</span> <span class="token string">&#39;15px 20px&#39;</span> <span class="token comment">// 导致重排（重排会引起重绘）</span>
</code></pre><p>以上操作会导致3次重绘1次重排; 可以动态添加class，只会导致1次重排（重排会引起重绘），从而减少重绘次数;</p><pre><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&#39;demo&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 添加class 统一添加/修改样式</span>
</code></pre><pre><code class="language-css"><span class="token selector">.demo</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 15px 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><ul><li>将DOM离线</li></ul><p>离线操作DOM：当对DOM 节点有较大改动的时候，我们先将元素脱离文档流，然后对元素进行操作，最后再把操作后的元素放回文档流。1. 修改DOM节点的display属性，临时将此节点从文档流中脱离，然后再恢复；</p><pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  我是demo
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><pre><code class="language-js">需要频繁操作<span class="token constant">DOM</span> 修改style

  <span class="token comment">// javascript</span>
  <span class="token comment">// 第一次操作修改 color、background、padding</span>
  <span class="token keyword">const</span> renderEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 导致重绘</span>
  renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background<span class="token operator">=</span> <span class="token string">&#39;#ccc&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 导致重绘</span>
  renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>padding <span class="token operator">=</span> <span class="token string">&#39;15px 20px&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 导致重排（重排会引起重绘）</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// 第二次操作修改 marginLeft、marginTop</span>
  <span class="token keyword">const</span> renderEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginLeft <span class="token operator">=</span> <span class="token string">&#39;15px&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 导致重排（重排会引起重绘）</span>
  renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginTop <span class="token operator">=</span> <span class="token string">&#39;15px&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 导致重排（重排会引起重绘）</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// 第三次操作修改 border</span>
  <span class="token keyword">const</span> renderEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">&#39;2px solid #ccc&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 导致重排（重排会引起重绘）</span>

以上操作触发多次重排、重绘<span class="token punctuation">;</span> 可以将renderEle进行离线操作<span class="token punctuation">;</span> 修改如下：

  <span class="token comment">// javascript</span>
  <span class="token keyword">const</span> renderEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 第一次操作修改 color、background、padding</span>
  renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 导致重排（重排会引起渲）</span>
  renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">;</span> <span class="token comment">// DOM不存在渲染树上不会引起重排、重绘</span>
  renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background<span class="token operator">=</span> <span class="token string">&#39;#ccc&#39;</span><span class="token punctuation">;</span><span class="token comment">// DOM不存在渲染树上不会引起重排、重绘</span>
  renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>padding <span class="token operator">=</span> <span class="token string">&#39;15px 20px&#39;</span><span class="token punctuation">;</span><span class="token comment">// DOM不存在渲染树上不会引起重排、重绘</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// 第二次操作修改 marginLeft、marginTop</span>
  renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginLeft <span class="token operator">=</span> <span class="token string">&#39;15px&#39;</span><span class="token punctuation">;</span><span class="token comment">// DOM不存在渲染树上不会引起重排、重绘</span>
  renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginTop <span class="token operator">=</span> <span class="token string">&#39;15px&#39;</span><span class="token punctuation">;</span><span class="token comment">// DOM不存在渲染树上不会引起重排、重绘</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// 第三次操作修改 border</span>
  renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">&#39;2px solid #ccc&#39;</span><span class="token punctuation">;</span><span class="token comment">// DOM不存在渲染树上不会引起重排、重绘</span>
  renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;block&#39;</span><span class="token punctuation">;</span><span class="token comment">// 导致重排（重排会引起渲）</span>
</code></pre><p>以上对隐藏的DOM元素操作不会引发其他元素的重排，这样只在隐藏和显示时触发2次重排。</p><h3 id="减小重排范围" tabindex="-1"><a class="header-anchor" href="#减小重排范围"><span>减小重排范围</span></a></h3><p>脱离文档流： 使用 absolute 或 fixed 脱离文档流：</p><pre><code class="language-html"><span class="token comment">&lt;!-- html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>demo<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo-one<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    我是demo 1号
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo-two<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    我是demo 2号
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo-there<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    我是demo 3号
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><pre><code class="language-javascript"><span class="token keyword">const</span> renderEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;demo-one&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>padding <span class="token operator">=</span> <span class="token string">&#39;15px 20px&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 导致重排（重排会引起重绘）</span>
renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">&#39;60px&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 导致重排（重排会引起重绘）</span>
</code></pre><p>将需要重排的元素，position属性设为absolute或fixed(某些特殊场合)，减小重排范围。</p><pre><code class="language-javascript">  <span class="token keyword">const</span> renderEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;demo-one&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">&#39;fixed&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 导致重排（重排会引起重绘）</span>
  renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>padding <span class="token operator">=</span> <span class="token string">&#39;15px 20px&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 导致重排（只有当前元素）</span>
  renderEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">&#39;60px&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 导致重排（只有当前元素）</span>
</code></pre><p>这样此DOM元素就脱离了文档流，它的变化不会影响到其他元素。</p><p>善用内存：在内存中多次操作DOM，再整个添加到DOM树</p><p>举例：异步请求接口获取数据，动态渲染到页面</p><div id="demo"><ul id="father"><li>我是0号,我后面还有1号、2号、3号、4号、5号</li></ul></div><p>// javascript const ulEle = document.getElementById(&quot;father&quot;); let arr = []; setTimeout( () =&gt; { arr = &quot;我是0号,我后面还有1号，2号，3号，4号，5号&quot;, &quot;我是2号&quot;, &quot;我是3号&quot;, &quot;我是4号&quot;, &quot;我是5号&quot;]; // 我是动态获取的 arr.forEach(element =&gt; { const childNode = document.createElement(&#39;li&#39;); childNode.innerText = element; ulEle.appendChild(childNode);// 每一次都会引起重排（重排会引起重绘） }) },1000)</p><p>导致多次重排； 可以进行以下修改(构建整个ul，而不是循环添加li)：</p><div id="demo"></div><p>// javascript const ulEle = document.getElementById(&quot;demo&quot;); const childUlNode = document.createElement(&#39;ul&#39;); let arr = []; setTimeout(() =&gt; { arr = [&quot;我是0号,我后面还有1号，2号，3号，4号，5号&quot;,&quot;我是1号&quot;, &quot;我是2号&quot;, &quot;我是3号&quot;, &quot;我是4号&quot;, &quot;我是5号&quot;]; // 我是动态获取的 arr.forEach(element =&gt; { const childLiNode = document.createElement(&#39;li&#39;); childLiNode.innerText = element; childUlNode.appendChild(childLiNode); }) },1000) ulEle.appendChild(childUlNode);// 只会引起一次重排（重排会引起重绘）</p><p>读写分离：将写入的值缓存，读取缓存的值</p><p>有一些浏览器针对重排做出来优化。比如Opera：当你触发重排的条件到达一定量的时候， 或者等到一定时间的时候，或者等一个线程结束，再一起进行重排；但除了渲染树的直接变化，当获取一些属性时，浏览器为取得正确的值也会触发重排。这样就使得浏览器的优化失效了；</p><span id="demo"> 我是demo </span><p>// javascript const offsetWidth = &#39;100px&#39;; const renderEle = document.getElementById(&#39;demo&#39;); renderEle.style.offsetWidth = offsetWidth // 导致重绘(写入) const tempoOffsetWidth = renderEle.style.offsetWidth // 读取可能会导致重排</p><p>上述代码中可使用读写分离（写入值的时候进行缓存），避免多次重排；</p><p>// javascript const offsetWidth = &#39;100px&#39;; const renderEle = document.getElementById(&#39;demo&#39;); renderEle.style.offsetWidth = offsetWidth // 导致重绘(写入) const tempoOffsetWidth = renderEle； // 避免直接读取offsetWidth</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,45),r={href:"https://juejin.cn/post/7159155955987382309?searchId=202402271028037817BA25175552C8B3CB",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const s=t("ExternalLinkIcon");return p(),e("div",null,[i,n("p",null,[n("a",r,[o("重绘和重排（回流）"),c(s)])])])}const h=a(u,[["render",k],["__file","zhonghuiyuzhongpai.html.vue"]]),E=JSON.parse('{"path":"/blogs/technology/CSS/zhonghuiyuzhongpai.html","title":"重绘(reflow)与重排(repaint、回流)","lang":"en-US","frontmatter":{"title":"重绘(reflow)与重排(repaint、回流)","date":"2024/07/01","tags":["CSS"],"categories":["CSS"]},"headers":[{"level":2,"title":"重绘","slug":"重绘","link":"#重绘","children":[{"level":3,"title":"哪些操作会发生重绘","slug":"哪些操作会发生重绘","link":"#哪些操作会发生重绘","children":[]}]},{"level":2,"title":"重排","slug":"重排","link":"#重排","children":[{"level":3,"title":"哪些操作会发生重排","slug":"哪些操作会发生重排","link":"#哪些操作会发生重排","children":[]}]},{"level":2,"title":"重排影响范围","slug":"重排影响范围","link":"#重排影响范围","children":[{"level":3,"title":"优化方案","slug":"优化方案","link":"#优化方案","children":[]},{"level":3,"title":"减小重排范围","slug":"减小重排范围","link":"#减小重排范围","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1719836602000,"updatedTime":1725440342000,"contributors":[{"name":"zhuxiaoying","email":"zhuxiaoying@meituan.com","commits":2}]},"filePathRelative":"blogs/technology/CSS/重绘与重排.md"}');export{h as comp,E as data};
