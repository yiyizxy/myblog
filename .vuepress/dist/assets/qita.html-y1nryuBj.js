import{_ as p,r as e,o as l,c as o,a as n,b as t,d as a,e as c}from"./app-BcWTENpX.js";const i="/myblog/assets/object-fit-Ts9Zawng.png",r="/myblog/assets/standard-YnFX_G0t.png",u="/myblog/assets/ie-6miTH20g.png",k="/myblog/assets/line-height-CPqLNRVH.png",h="/myblog/assets/line-height-calculate-C3r9JuDF.png",d="/myblog/assets/area-CqpPowNd.png",g="/myblog/assets/z-index-BAvTaRVV.png",m="/myblog/assets/triangle-Bg9RYJyo.png",b="/myblog/assets/triangle-top-B_-kHFTU.png",f={},x=c('<h2 id="object-fit使用" tabindex="-1"><a class="header-anchor" href="#object-fit使用"><span>object-fit使用</span></a></h2><p><img src="'+i+`" alt="object-fit" title="object-fit"></p><h2 id="nth-child和nth-of-type区别" tabindex="-1"><a class="header-anchor" href="#nth-child和nth-of-type区别"><span>nth-child和nth-of-type区别</span></a></h2><h3 id="nth-child" tabindex="-1"><a class="header-anchor" href="#nth-child"><span>nth-child</span></a></h3><p>用于选择其父元素的第n个子元素，不考虑元素的类型。</p><pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Span 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><pre><code class="language-css">
<span class="token comment">/* 选择父元素中的第2个子元素，不论其类型 */</span>
<span class="token selector">li:nth-child(2)</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 输出Item 2 */</span>

<span class="token selector">li:nth-child(3)</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 不会选择任何元素，因为第三个子元素是span */</span>
</code></pre><h3 id="nth-of-type" tabindex="-1"><a class="header-anchor" href="#nth-of-type"><span>nth-of-type</span></a></h3><p>用于选择其父元素中特定类型的第 n 个子元素，只考虑特定类型的元素</p><pre><code class="language-css"><span class="token comment">/* 选择父元素中第二个li元素 */</span>
<span class="token selector">li:nth-of-type(2)</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*  输出Item 2 */</span>

<span class="token selector">li:nth-of-type(3)</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*  输出Item 3 */</span>

</code></pre><pre><code class="language-css"><span class="token selector">.left</span><span class="token punctuation">{</span>
     <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
     <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
     <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
     <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token selector">.right</span><span class="token punctuation">{</span>
     <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
     <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
     <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 
&lt;div class=<span class="token string">&quot;left&quot;</span>&gt;&lt;/div&gt;
&lt;div class=<span class="token string">&quot;right&quot;</span>&gt;&lt;/div&gt;

</code></pre><h2 id="如何对项目中的图片进行优化" tabindex="-1"><a class="header-anchor" href="#如何对项目中的图片进行优化"><span>如何对项目中的图片进行优化</span></a></h2><ol><li>不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片完全可以用CSS去代替。</li><li>对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然 后去请求相应裁剪好的图片。</li><li>小图使用base64格式</li><li>将多个图标文件整合到一张图片中(雪碧图)</li><li>选择正确的图片格式：</li></ol><ul><li>对于能够显示WebP格式的浏览器尽量使用WebP格式。因为WebP格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥 有肉眼识别无差异的图像质量，缺点就是兼容性并不好</li><li>小图使用PNG，其实对于大部分图标这类图片，完全可以使用SVG代替</li><li>照片使用JPEG</li></ul><h2 id="常见的图片格式及使用场景" tabindex="-1"><a class="header-anchor" href="#常见的图片格式及使用场景"><span>常见的图片格式及使用场景</span></a></h2><ol><li>BMP是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以BMP格式的图片通常是较大的文件。</li><li>GIF是无损的、采用索引色的点阵图。采用LZW压缩算法进行编码。文件小是GIF格式的优点，同时，GIF格式还具有支持动画以及透明的优点。但是GIF格式仅支持8bit的索引色，所以GIF格式适用于对色彩要求不高同时需要文件体积较小的场景。</li><li>JPEG是有损的、采用直接色的点阵图。色彩更丰富，JPEG非常适合用来存储照片，与GIF相比，JPEG不适合用来存储企业Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较GIF更大。</li><li>PNG-8是无损的、使用索引色的点阵图。PNG是一种比较新的图片格式，PNG-8是非常好的GIF格式替代者，在可能的情况下，应该尽可能的使用PNG-8而不是GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8还支持透明度的调节，而GIF并不支持。除非需要动画的支持，否则没有理由使用GIF而不是PNG-8。</li><li>PNG-24是无损的、使用直接色的点阵图。PNG-24的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24格式的文件大小要比BMP小得多。当然，PNG24的图片还是要比JPEG、GIF、PNG-8大得多。</li><li>SVG是无损的矢量图。SVG是矢量图意味着SVG图片由直线和曲线以及绘制它们的方法组成。当放大SVG图片时，看到的还是线和曲线，而不会出现像素点。SVG图片在放大时，不会失真，所以它适合用来绘制Logo、Icon等。</li><li>WebP是谷歌开发的一种新图片格式，WebP是同时支持有损和无损压缩的、使用直接色的点阵图。目前只有Chrome浏览器和Opera浏览器支持WebP格式，兼容性不太好。</li></ol><p>在无损压缩的情况下，相同质量的WebP图片，文件大小要比PNG小26%； 在有损压缩的情况下，相同质量的WebP图片，文件大小要比JPEG小25%~34%； WebP图片格式支持图片透明度，一个无损压缩的WebP图片，如果要支持透明度只需要22%的格外文件大小。</p><h2 id="为什么不建议对图片进行gzip压缩" tabindex="-1"><a class="header-anchor" href="#为什么不建议对图片进行gzip压缩"><span>为什么不建议对图片进行gzip压缩</span></a></h2><p>对文件资源压缩可以减少体积，节省带宽，从而提高网页的加载速度，对于html、css、js这类文件gzip可以压缩至源文件的1/3，效果非常好，但是对于图片而言，gzip压缩之后，图片前后体积变化不大，原因是gzip是使用的defect算法压缩的，其原理是会先使用LZ77算法对文件算法然后使用huffman算法进行编码再次压缩，最终得到压缩后的图片，重复度越高的文件压缩效果越好，但是常见的图片格式jpg、png、gif实际已用过defect算法压缩过，没必须重复压缩，重复压缩并不能减少文件体积，反而为增减文件头尾部的信息导致总体积返回变大。</p><h2 id="display的block、inline和inline-block的区别" tabindex="-1"><a class="header-anchor" href="#display的block、inline和inline-block的区别"><span>display的block、inline和inline-block的区别</span></a></h2><p>block：会独占一行，多个元素会另起一行，可以设置width、height、margin和padding属性； inline：元素不会独占一行，设置width、height属性无效。但可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin； inline-block：将对象设置为inline对象，但对象的内容作为block对象呈现，之后的内联对象会被排列在同一行内。</p><h2 id="display-inline-block什么时候会显示间隙" tabindex="-1"><a class="header-anchor" href="#display-inline-block什么时候会显示间隙"><span>display:inline-block什么时候会显示间隙？</span></a></h2><p>有空格时会有间隙，可以删除空格解决； margin正值时，可以让margin使用负值解决； 使用font-size时，可通过设置font-size:0、letter-spacing、word-spacing解决</p><h2 id="块级元素和行内元素区别" tabindex="-1"><a class="header-anchor" href="#块级元素和行内元素区别"><span>块级元素和行内元素区别</span></a></h2><h3 id="块级元素" tabindex="-1"><a class="header-anchor" href="#块级元素"><span>块级元素</span></a></h3><p>可以设置宽高； 设置margin和padding都有效； 可以自动换行； 多个块状，默认排列从上到下</p><h3 id="行内元素" tabindex="-1"><a class="header-anchor" href="#行内元素"><span>行内元素</span></a></h3><p>设置宽高无效； 可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin； 不会自动换行；</p><h2 id="隐藏元素的方法有哪些" tabindex="-1"><a class="header-anchor" href="#隐藏元素的方法有哪些"><span>隐藏元素的方法有哪些</span></a></h2><p>display: none：渲染树不会包含该渲染对象，因此该元素不会在页面中占据位置，也不会响应绑定的监听事件。 visibility: hidden：元素在页面中仍占据空间，但是不会响应绑定的监听事件。 opacity: 0：将元素的透明度设置为 0，以此来实现元素的隐藏。元素在页面中仍然占据空间，并且能够响应元素绑定的监听事件。 position: absolute：通过使用绝对定位将元素移除可视区域内，以此来实现元素的隐藏。 z-index: 负值：来使其他元素遮盖住该元素，以此来实现隐藏。 clip/clip-path ：使用元素裁剪的方法来实现元素的隐藏，这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。 transform: scale(0,0)：将元素缩放为0，来实现元素的隐藏。这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。</p><h2 id="link和-import的区别" tabindex="-1"><a class="header-anchor" href="#link和-import的区别"><span>link和@import的区别</span></a></h2><p>两者都是外部引用CSS的方式，它们的区别如下： link是HTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。 link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。 link是HTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。 link支持使用Javascript控制DOM去改变样式；而@import不支持。</p><h2 id="transform、transition和animation的区别" tabindex="-1"><a class="header-anchor" href="#transform、transition和animation的区别"><span>transform、transition和animation的区别</span></a></h2><p>transform用于元素旋转、缩放、移动、倾斜等效果 transition是过渡属性，强调过渡，可以为一个元素在不同状态之间切换的时候定义不同的过渡效果，它的实现需要触发一个事件（比如鼠标移动上去，焦点，点击等）才执行动画。它类似于flash的补间动画，设置一个开始关键帧，一个结束关键帧。 animation是动画属性，它的实现不需要触发事件，设定好时间之后可以自己执行，且可以循环一个动画。它也类似于flash的补间动画，但是它可以设置多个关键帧（用@keyframe定义）完成动画。</p><h2 id="伪元素和伪类的区别和作用" tabindex="-1"><a class="header-anchor" href="#伪元素和伪类的区别和作用"><span>伪元素和伪类的区别和作用？</span></a></h2><p>伪元素：在内容元素的前后插入额外的元素或样式，但是这些元素实际上并不在文档中生成。它们只在外部显示可见，但不会在文档的源代码中找到它们，因此，称为“伪”元素。例如：</p><pre><code class="language-css"><span class="token selector">p::before</span> <span class="token punctuation">{</span><span class="token property">content</span><span class="token punctuation">:</span><span class="token string">&quot;第一章：&quot;</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">p::after</span> <span class="token punctuation">{</span><span class="token property">content</span><span class="token punctuation">:</span><span class="token string">&quot;Hot!&quot;</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">p::first-line</span> <span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">p::first-letter</span> <span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span>30px<span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><p>伪类：将特殊的效果添加到特定选择器上。它是已有元素上添加类别的，不会产生新的元素。例如：</p><pre><code class="language-css"><span class="token selector">a:hover</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> #FF00FF<span class="token punctuation">}</span>
<span class="token selector">p:first-child</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">}</span>
</code></pre><p>总结：伪类是通过在元素选择器上加⼊伪类改变元素状态，⽽伪元素通过对元素的操作进⾏对元素的改变。</p><h2 id="对requestanimationframe的理解" tabindex="-1"><a class="header-anchor" href="#对requestanimationframe的理解"><span>对requestAnimationframe的理解</span></a></h2><p>实现动画效果的方法比较多，Javascript中可以通过定时器setTimeout来实现，CSS3中可以使用transition和animation来实现，HTML5中的canvas也可以实现。除此之外，HTML5提供一个专门用于请求动画的API，那就是 requestAnimationFrame，顾名思义就是请求动画帧。 MDN对该方法的描述：</p><p>window.requestAnimationFrame()告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。</p><p>语法:<code>window.requestAnimationFrame(callback);</code> 其中，callback是下一次重绘之前更新动画帧所调用的函数(即上面所说的回调函数)。该回调函数会被传入DOMHighResTimeStamp参数，它表示requestAnimationFrame() 开始去执行回调函数的时刻。该方法属于宏任务，所以会在执行完微任务之后再去执行。 取消动画:使用cancelAnimationFrame()来取消执行动画，该方法接收一个参数——requestAnimationFrame默认返回的id，只需要传入这个id就可以取消动画了。 优势： CPU节能：使用SetTinterval 实现的动画，当页面被隐藏或最小化时，SetTinterval 仍然在后台执行动画任务，由于此时页面处于不可见或不可用状态，刷新动画是没有意义的，完全是浪费CPU资源。而RequestAnimationFrame则完全不同，当页面处理未激活的状态下，该页面的屏幕刷新任务也会被系统暂停，因此跟着系统走的RequestAnimationFrame也会停止渲染，当页面被激活时，动画就从上次停留的地方继续执行，有效节省了CPU开销。 函数节流：在高频率事件( resize, scroll 等)中，为了防止在一个刷新间隔内发生多次函数执行，RequestAnimationFrame可保证每个刷新间隔内，函数只被执行一次，这样既能保证流畅性，也能更好的节省函数执行的开销，一个刷新间隔内函数执行多次时没有意义的，因为多数显示器每16.7ms刷新一次，多次绘制并不会在屏幕上体现出来。 减少DOM操作：requestAnimationFrame 会把每一帧中的所有DOM操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率，一般来说，这个频率为每秒60帧。</p><p>setTimeout执行动画的缺点：它通过设定间隔时间来不断改变图像位置，达到动画效果。但是容易出现卡顿、抖动的现象；原因是： settimeout任务被放入异步队列，只有当主线程任务执行完后才会执行队列中的任务，因此实际执行时间总是比设定时间要晚； settimeout的固定时间间隔不一定与屏幕刷新间隔时间相同，会引起丢帧。</p><h2 id="requestanimationframe和requestidlecallback有什么区别" tabindex="-1"><a class="header-anchor" href="#requestanimationframe和requestidlecallback有什么区别"><span>requestAnimationFrame和requestIdleCallback有什么区别？</span></a></h2><p>requestAnimationFrame 是一个用于在下一次浏览器重绘之前执行指定的回调函数的方法。它通常用于执行与动画相关的任务，以确保动画的流畅性和性能。 调用时机: requestAnimationFrame 的回调函数会在浏览器下一次绘制之前执行，通常在每秒约 60 次的频率下执行，这与浏览器的刷新率相匹配（通常为每秒 60 次）。 用途: requestAnimationFrame适用于需要在动画中更新界面状态的场景，如实现平滑的动画效果、制作游戏等。</p><p>requestIdleCallback: requestIdleCallback是一个用于在浏览器空闲时执行指定的回调函数的方法。它通常用于执行一些低优先级的任务，以确保不会影响到页面的交互和动画性能。 调用时机: requestIdleCallback 的回调函数会在浏览器空闲时执行，即在浏览器没有其他任务需要执行时，会尽快执行注册的回调函数。 用途: requestIdleCallback 适用于执行一些低优先级的任务，如执行分析、预加载资源、后台数据同步等。</p><h2 id="对盒模型的理解" tabindex="-1"><a class="header-anchor" href="#对盒模型的理解"><span>对盒模型的理解</span></a></h2><p>CSS3中的盒模型有以下两种：标准盒子模型、IE盒子模型 <img src="`+r+'" alt="standard" title="standard"><img src="'+u+'" alt="ie" title="ie"></p><p>盒模型都是由四个部分组成的，分别是margin、border、padding和content。</p><p>标准盒模型和IE盒模型的区别在于设置width和height时，所对应的范围不同： 标准盒模型的width和height属性的范围只包含了content IE盒模型的width和height属性的范围包含了border、padding和content。</p><p>可以通过修改元素的box-sizing属性来改变元素的盒模型： box-sizing: content-box表示标准盒模型（默认值） box-sizing: border-box表示IE盒模型（怪异盒模型）</p><h2 id="为什么有时候用translate来改变位置而不是定位" tabindex="-1"><a class="header-anchor" href="#为什么有时候用translate来改变位置而不是定位"><span>为什么有时候⽤translate来改变位置⽽不是定位？</span></a></h2><p>translate是transform属性的⼀个值。改变transform或opacity不会触发浏览器重新布局（reflow）或重绘（repaint），只会触发复合（compositions）。⽽改变绝对定位会触发重新布局，进⽽触发重绘和复合。transform使浏览器为元素创建⼀个GPU图层，但改变绝对定位会使⽤到CPU。 因此translate()更⾼效，可以缩短平滑动画的绘制时间。 ⽽translate改变位置时，元素依然会占据其原始空间，绝对定位就不会发⽣这种情况。</p><h2 id="li与li之间有看不见的空白间隔是什么原因引起的-如何解决" tabindex="-1"><a class="header-anchor" href="#li与li之间有看不见的空白间隔是什么原因引起的-如何解决"><span>li与li之间有看不见的空白间隔是什么原因引起的？如何解决？</span></a></h2><p>浏览器会把inline内联元素间的空白字符（空格、换行、Tab等）渲染成一个空格。为了美观，通常是一个<code>&lt;li&gt;</code>放在一行，这导致<code>&lt;li&gt;</code>换行后产生换行字符，它变成一个空格，占用了一个字符的宽度。 解决办法： （1）为<code>&lt;li&gt;</code>设置float:left。不足：有些容器是不能设置浮动，如左右切换的焦点图等。 （2）将所有<code>&lt;li&gt;</code>写在同一行。不足：代码不美观。 （3）将<code>&lt;ul&gt;</code>内的字符尺寸直接设为0，即font-size:0。不足：<code>&lt;ul&gt;</code>中的其他字符尺寸也被设为0，需要额外重新设定其他字符尺寸，且在Safari浏览器依然会出现空白间隔。 （4）消除<code>&lt;ul&gt;</code>的字符间隔letter-spacing:-8px，不足：这也设置了<code>&lt;li&gt;</code>内的字符间隔，因此需要将<code>&lt;li&gt;</code>内的字符间隔设为默认letter-spacing:normal。</p><h2 id="css3中有哪些新特性" tabindex="-1"><a class="header-anchor" href="#css3中有哪些新特性"><span>CSS3中有哪些新特性</span></a></h2><ul><li>新增各种CSS选择器（: not(.input)：所有 class 不是“input”的节点）</li><li>圆角（border-radius:8px）</li><li>多列布局（multi-column layout）</li><li>阴影和反射（Shadoweflect）</li><li>文字特效（text-shadow）</li><li>文字渲染（Text-decoration）</li><li>线性渐变（gradient）</li><li>旋转（transform） 增加了旋转,缩放,定位,倾斜,动画,多背景</li></ul><h2 id="对csssprites的理解" tabindex="-1"><a class="header-anchor" href="#对csssprites的理解"><span>对CSSSprites的理解</span></a></h2><p>CSSSprites（精灵图），将一个页面涉及到的所有图片都包含到一张大图中去，然后利用CSS的background-image，background-repeat，background-position属性的组合进行背景定位。</p><p>优点： 利用CSS Sprites能很好地减少网页的http请求，从而大大提高了页面的性能，这是CSS Sprites最大的优点； CSS Sprites能减少图片的字节，把3张图片合并成1张图片的字节总是小于这3张图片的字节总和。</p><p>缺点： 在图片合并时，要把多张图片有序的、合理的合并成一张图片，还要留好足够的空间，防止板块内出现不必要的背景。在宽屏及高分辨率下的自适应页面，如果背景不够宽，很容易出现背景断裂； CSSSprites在开发的时候相对来说有点麻烦，需要借助photoshop或其他工具来对每个背景单元测量其准确的位置。 维护方面：CSS Sprites在维护的时候比较麻烦，页面背景有少许改动时，就要改这张合并的图片，无需改的地方尽量不要动，这样避免改动更多的CSS，如果在原来的地方放不下，又只能（最好）往下加图片，这样图片的字节就增加了，还要改动CSS。</p><h2 id="什么是物理像素-逻辑像素和像素密度-为什么在移动端开发时需要用到-3x、-2x这种图片" tabindex="-1"><a class="header-anchor" href="#什么是物理像素-逻辑像素和像素密度-为什么在移动端开发时需要用到-3x、-2x这种图片"><span>什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x、@2x这种图片？</span></a></h2><p>以iPhone XS为例，当写CSS代码时，针对于单位px，其宽度为414px&amp;896px，也就是说当赋予一个DIV元素宽度为414px，这个div就会填满手机的宽度； 而如果有一把尺子来实际测量这部手机的物理像素，实际为 1242*2688 物理像素；经过计算可知，1242/414=3，也就是说，在单边上，一个逻辑像素=3个物理像素，就说这个屏幕的像素密度为 3，也就是常说的3倍屏。 对于图片来说，为了保证其不失真，1个图片像素至少要对应一个物理像素，假如原始图片是 500300 像素，那么在 3 倍屏上就要放一个 1500900 像素的图片才能保证 1 个物理像素至少对应一个图片像素，才能不失真。</p><h2 id="对line-height的理解及其赋值方式" tabindex="-1"><a class="header-anchor" href="#对line-height的理解及其赋值方式"><span>对line-height的理解及其赋值方式</span></a></h2><h3 id="line-height的概念" tabindex="-1"><a class="header-anchor" href="#line-height的概念"><span>line-height的概念</span></a></h3><p><img src="'+k+'" alt="line-height" title="line-height"></p><ul><li>line-height指一行文本的高度，包含了字间距，实际上是下一行基线到上一行基线距离,即行间距 = line-height - font-size；</li><li>如果一个标签没有定义height属性，那么其最终表现的高度由line-height决定；</li><li>一个容器没有设置高度，那么撑开容器高度的是line-height，而不是容器内的文本内容；</li><li>把line-height值设置为height一样大小的值可以实现单行文字的垂直居中；</li></ul><h3 id="line-height的赋值方式" tabindex="-1"><a class="header-anchor" href="#line-height的赋值方式"><span>line-height的赋值方式</span></a></h3><p><img src="'+h+`" alt="line-height计算" title="line-height计算"></p><p>以上图片需补充说明下%和em都是直接继承父元素计算后的line-height的值</p><ul><li>带单位：px是固定值，而em会参考父元素font-size值计算自身的行高</li><li>纯数字：会把比例传递给后代。例如，父级行高为1.5，子元素字体为18px，则子元素行高为 1.5 * 18 = 27px</li><li>百分比|em：将计算后的值传递给后代</li></ul><h2 id="css优化和提高性能的方法有哪些" tabindex="-1"><a class="header-anchor" href="#css优化和提高性能的方法有哪些"><span>CSS优化和提高性能的方法有哪些？</span></a></h2><p>加载性能： （1）css压缩：将写好的css进行打包压缩，可以减小文件体积。 （2）css单一样式：当需要下边距和左边距的时候，很多时候会选择使用margin:top 0 bottom 0；但margin-bottom:bottom;margin-left:left;执行效率会更高。 （3）减少使用@import，建议使用link，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载。</p><p>选择器性能： （1）关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。CSS选择符是从右到左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等； （2）如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）。 （3）避免使用通配规则，如*{}计算次数惊人，只对需要用到的元素进行选择。 （4）尽量少的去对标签进行选择，而是用class。 （5）尽量少的去使用后代选择器，降低选择器的权重值。后代选择器的开销是最高的，��量将选择器的深度降到最低，最高不要超过三层，更多的使用类来关联每一个标签元素。 （6）了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。</p><p>渲染性能： （1）慎重使用高性能属性：浮动、定位。 （2）尽量减少页面重排、重绘。 （3）去除空规则:｛｝。空规则的产生原因一般来说是为了预留样式。去除这些空规则无疑能减少css文档体积。 （4）属性值为0时，不加单位。 （5）属性值为浮动小数0.**，可以省略小数点之前的0。 （6）标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后。 （7）不使用@import前缀，它会影响css的加载速度。 （8）选择器优化嵌套，尽量避免层级过深。 （9）css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使用时，优劣考虑清楚，再使用。 （10）正确使用display的属性，由于display的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性能。 （11）不滥用web字体。对于中文网站来说WebFonts可能很陌生，国外却很流行。web fonts通常体积庞大，而且一些浏览器在下载web fonts时会阻塞页面渲染损伤性能。 可维护性、健壮性： （1）将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用，提高css的可维护性。 （2）样式与内容分离：将css代码定义到外部css中。</p><h2 id="css预处理器-后处理器是什么-为什么要使用它们" tabindex="-1"><a class="header-anchor" href="#css预处理器-后处理器是什么-为什么要使用它们"><span>CSS预处理器/后处理器是什么？为什么要使用它们？</span></a></h2><p>预处理器，如：less，sass，用来预编译sass或者less，增加了css代码的复用性。层级，mixin，变量，循环，函数等对编写以及开发UI组件都极为方便。 后处理器，如：postCss，通常是在完成的样式表中根据css规范处理css，让其更加有效。目前最常做的是给css属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。 css预处理器为css增加一些编程特性，无需考虑浏览器的兼容问题，可以在CSS中使用变量，简单的逻辑程序，函数等在编程语言中的一些基本的性能，可以让css更加的简洁，增加适应性以及可读性，可维护性等。 其它css预处理器语言：Sass（Scss）, Less, Stylus, Turbine, Swithch css, CSS Cacheer, DT Css。</p><h2 id="单行、多行文本溢出隐藏" tabindex="-1"><a class="header-anchor" href="#单行、多行文本溢出隐藏"><span>单行、多行文本溢出隐藏</span></a></h2><p>单行文本溢出</p><pre><code class="language-css"><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            // 溢出隐藏
<span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>      // 溢出用省略号显示
<span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>         // 规定段落中的文本不进行换行
</code></pre><p>多行文本溢出</p><pre><code class="language-css"><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            // 溢出隐藏
<span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>     // 溢出用省略号显示
<span class="token property">display</span><span class="token punctuation">:</span>-webkit-box<span class="token punctuation">;</span>         // 作为弹性伸缩盒子模型显示。
<span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span>vertical<span class="token punctuation">;</span> // 设置伸缩盒子的子元素排列方式：从上到下垂直排列
<span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span>3<span class="token punctuation">;</span>        // 显示的行数
</code></pre><h2 id="对媒体查询的理解" tabindex="-1"><a class="header-anchor" href="#对媒体查询的理解"><span>对媒体查询的理解？</span></a></h2><p>使用@media查询，可以针对不同的媒体类型定义不同的样式。@media可以针对不同的屏幕尺寸设置不同的样式，特别是需要设置设计响应式的页面，@media是非常有用的。当重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。</p><pre><code class="language-html"><span class="token comment">&lt;!-- link元素中的CSS媒体查询 --&gt;</span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(max-width: 800px)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example.css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token comment">&lt;!-- 样式表中的CSS媒体查询 --&gt;</span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"> 
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span> 
  <span class="token selector">.facet_sidebar</span> <span class="token punctuation">{</span> 
    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(max-width: 800px)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example.css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token comment">&lt;!-- 样式表中的CSS媒体查询 --&gt;</span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"> 
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span> 
  <span class="token selector">.facet_sidebar</span> <span class="token punctuation">{</span> 
    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><p>简单来说，使用@media查询，可以针对不同的媒体类型定义不同的样式。@media可以针对不同的屏幕尺寸设置不同的样式，特别是需要设置设计响应式的页面，@media是非常有用的。当重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。</p><h2 id="如何判断元素是否到达可视区域" tabindex="-1"><a class="header-anchor" href="#如何判断元素是否到达可视区域"><span>如何判断元素是否到达可视区域？？</span></a></h2><p>以图片显示为例： <img src="`+d+`" alt="边框" title="边框"> window.innerHeight 是浏览器可视区的高度； document.body.scrollTop || document.documentElement.scrollTop 是浏览器滚动的过的距离； imgs.offsetTop 是元素顶部距离文档顶部的高度（包括滚动条的距离）； 内容达到显示区域的：img.offsetTop &lt; window.innerHeight + document.body.scrollTop;</p><h2 id="z-index属性在什么情况下会失效" tabindex="-1"><a class="header-anchor" href="#z-index属性在什么情况下会失效"><span>z-index属性在什么情况下会失效</span></a></h2><p>z-index元素的position属性需要是relative，absolute或是fixed</p><ul><li>父元素position为relative时，子元素的z-index失效。解决：父元素position改为absolute或static；</li><li>元素没有设置position属性为非static属性。解决：设置该元素的position属性为relative，absolute或是fixed中的一种；</li><li>元素在设置z-index的同时还设置了float浮动。解决：float去除，改为display：inline-block；</li></ul><h2 id="说说什么是bfc" tabindex="-1"><a class="header-anchor" href="#说说什么是bfc"><span>说说什么是BFC?</span></a></h2><p>Box：Box是CSS布局的对象和基本单位，⼀个⻚⾯是由很多个Box组成的，这个Box就是我们所说的盒模型。 Formatting context：块级上下⽂格式化，它是⻚⾯中的⼀块渲染区域，并且有⼀套渲染规则，它决定了其⼦元素将如何定位，以及和其他元素的关系和相互作⽤。 块格式上下文(Block Formatting Context，BFC)，是Web页面的可视CSS渲染的一部分，指一个独立的块级渲染区域，只有Block-level Box（块级元素）参与，该区域拥有一套渲染规则来约束块级盒子的布局，且与区域外部无关。通俗来讲：BFC是一个独立的布局环境，可以理解为一个容器，在这个容器中按照一定规则进行物品摆放，并且不会影响其它环境中的物品。如果一个元素符合触发BFC的条件，则BFC中的元素布局不受外部影响。</p><p>BFC一般用于解决浮动元素高度塌陷、相邻元素边距折叠的问题。</p><p>*<strong>形成BFC的常见条件</strong></p><ul><li>根元素html</li><li>float属性不为none：left、right</li><li>position的值不为static或者relative：absoluted、fixed</li><li>overflow不为visible: auto(常见)、scroll、hidden</li><li>diaplay值为：inline-block、table-cell、table-caption、flex、inline-flex、grid、inline-grid、floww-root</li></ul><p>*<strong>BFC作用</strong></p><ul><li>解决margin的重叠问题：由于BFC是一个独立的区域，内部的元素和外部的元素互不影响，将两个元素变为两个BFC，就解决了margin重叠的问题。</li><li>解决高度塌陷的问题：在对子元素设置浮动后，父元素会发生高度塌陷，也就是父元素的高度变为0。解决这个问题，只需要把父元素变成一个BFC。常用的办法是给父元素设置overflow:hidden。</li><li>创建自适应两栏布局：可以用来创建自适应两栏布局：左边的宽度固定，右边的宽度自适应。</li></ul><h2 id="为什么需要清除浮动-清除浮动的方式" tabindex="-1"><a class="header-anchor" href="#为什么需要清除浮动-清除浮动的方式"><span>为什么需要清除浮动？清除浮动的方式</span></a></h2><p>浮动的定义： 非IE浏览器下，容器不设高度且子元素浮动时，容器高度不能被内容撑开。此时，内容会溢出到容器外面而影响布局。这种现象被称为浮动（溢出）。</p><p>浮动的工作原理：</p><ul><li>浮动元素脱离文档流，不占据空间（引起“高度塌陷”现象）</li><li>浮动元素碰到包含它的边框或者其他浮动元素的边框停留</li></ul><p>浮动元素可以左右移动，直到遇到另一个浮动元素或者遇到它外边缘的包含框。浮动框不属于文档流中的普通流，当元素浮动之后，不会影响块级元素的布局，只会影响内联元素布局。此时文档流中的普通流就会表现得该浮动框不存在一样的布局模式。当包含框的高度小于浮动框的时候，此时就会出现“高度塌陷”。</p><p>浮动元素引起问题：</p><ul><li>父元素的高度无法被撑开，影响与父元素同级的元素</li><li>与浮动元素同级的非浮动元素会跟随其后</li><li>若浮动的元素不是第一个元素，则该元素之前的元素也要浮动，否则会影响页面的显示结构</li></ul><p>清除浮动的方式：</p><ul><li>给父级div定义height属性</li><li>最后一个浮动元素之后添加一个空的div标签，并添加clear:both样式</li><li>包含浮动元素的父级标签添加overflow:hidden或者overflow:auto</li><li>在父容器伪元素after上做 清除浮动</li></ul><pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>clear<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><pre><code class="language-css"><span class="token selector">// clear属性只有块级元素才有效的，而::after等伪元素默认都是内联水平，这就是借助伪元素清除浮动影响时需要设置display属性值的原因。
.clear::after</span><span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="元素的层叠顺序" tabindex="-1"><a class="header-anchor" href="#元素的层叠顺序"><span>元素的层叠顺序</span></a></h2><p>层叠顺序，英文称作 stacking order，表示元素发生层叠时有着特定的垂直显示顺序。下面是盒模型的层叠规则： <img src="`+g+`" alt="z-index" title="z-index"></p><p>对于上图，由上到下分别是： （1）背景和边框：建立当前层叠上下文元素的背景和边框。 （2）负的z-index：当前层叠上下文中，z-index属性值为负的元素。 （3）块级盒：文档流内非行内级非定位后代元素。 （4）浮动盒：非定位浮动元素。 （5）行内盒：文档流内行内级非定位后代元素。 （6）z-index:0：层叠级数为0的定位元素。 （7）正z-index：z-index属性值为正的定位元素。 注意: 当定位元素z-index:auto，生成盒在当前层叠上下文中的层级为0，不会建立新的层叠上下文，除非是根元素。</p><h2 id="水平垂直居中的实现" tabindex="-1"><a class="header-anchor" href="#水平垂直居中的实现"><span>水平垂直居中的实现</span></a></h2><pre><code class="language-css"><span class="token selector">// 方法一： position + transform
.parent</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token selector">.child</span> <span class="token punctuation">{</span> 
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span> 
  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">// 方法二：position + margin
.parent</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token selector">.child</span> <span class="token punctuation">{</span> 
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span> 
  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> -50px<span class="token punctuation">;</span>     <span class="token comment">/* 自身 height 的一半 */</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> -50px<span class="token punctuation">;</span>    <span class="token comment">/* 自身 width 的一半 */</span>
<span class="token punctuation">}</span>
<span class="token selector">// 方法三：position + margin[适用于盒子有宽高的情况]
.parent</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.child</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">// 方法四：flex布局
.parent</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="实现一个三角形" tabindex="-1"><a class="header-anchor" href="#实现一个三角形"><span>实现一个三角形</span></a></h2><p>CSS绘制三角形主要用到的是border属性，也就是边框。平时在给盒子设置边框时，往往都设置很窄，就可能误以为边框是由矩形组成的。实际上，border属性是由三角形组成的。</p><p><img src="`+m+'" alt="边框" title="边框"><img src="'+b+`" alt="上三角形" title="上三角形"></p><pre><code class="language-css"><span class="token selector">// 实现4色三角形，如上图
div</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 100px solid<span class="token punctuation">;</span>
    <span class="token property">border-color</span><span class="token punctuation">:</span> orange blue red green<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">// 实现上三角形
div</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">border-top</span><span class="token punctuation">:</span> 50px solid red<span class="token punctuation">;</span>
  <span class="token property">border-left</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>
  <span class="token property">border-right</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">// 实现左三角形
div</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">border-left</span><span class="token punctuation">:</span> 50px solid red<span class="token punctuation">;</span>
  <span class="token property">border-top</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>
  <span class="token property">border-bottom</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="实现一个扇形" tabindex="-1"><a class="header-anchor" href="#实现一个扇形"><span>实现一个扇形</span></a></h2><pre><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 100px solid transparent<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">heigt</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">border-top-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="设置小于12px的字体" tabindex="-1"><a class="header-anchor" href="#设置小于12px的字体"><span>设置小于12px的字体</span></a></h2><ol><li>使用Webkit的内核的-webkit-text-size-adjust的私有CSS属性来解决，只要加了-webkit-text-size-adjust:none;字体大小就不受限制了。但是chrome更新到27版本之后就不可以用了。所以高版本chrome谷歌浏览器已经不再支持-webkit-text-size-adjust样式，所以要使用时候慎用。</li><li>使用css3的transform缩放属性-webkit-transform:scale(0.5); 注意-webkit-transform:scale(0.75);收缩的是整个元素的大小，这时候，如果是内联元素，必须要将内联元素转换成块元素，可以使用display：block/inline-block/...；</li><li>使用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观。</li></ol><h2 id="css-in-js-的优点和缺陷" tabindex="-1"><a class="header-anchor" href="#css-in-js-的优点和缺陷"><span>CSS-in-JS 的优点和缺陷</span></a></h2><h3 id="优势" tabindex="-1"><a class="header-anchor" href="#优势"><span>优势</span></a></h3><p>1.没有全局样式冲突 就像js天然支持模块化的好处一样，原生CSS因为没有模块化的能力，和容易导致全局样式污染，如果样式不是特意用BEM的方式命名，或者借助css module的能力，想要避免样式冲突就只能用css-in-js。</p><p>2.自带tree-shaking 功能 由于css-in-js支持模块化的样式定义，每个组件的样式会被定义成一个单独的模块，而构建工具会对定义的样式模块进行静态分析，使得未使用的样式模块不会打包到最终的产物中。</p><p>3.方便样式管理 css-in-js会把样式和组件绑定在一起，当这个组件要被删除掉的时候，直接把这些代码删除掉就好了，不用担心删掉的样式代码会对项目的其他组件样式产生影响（css-modules也一样能做到，只是必须单独拆一个样式文件）。</p><p>4.灵活性高 css-in-js允许再样式中使用Javascript变量，从而使组件的样式具备高可定制化的能力。</p><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h3><p>1.增加了运行时开销 组件每次渲染时，css-in-js库必须将样式序列化为可被插入到页面的CSS样式，显然这需要额外的CPU消耗，尤其是在React 18的并发模式下，会存在无法解决的性能问题。 React核心团队成员、Hook设计者Sebastian Markbåge在React 18工作组的这篇非常有价值的讨论中说道：</p><p>在并发渲染中，React可以在渲染之间让出线程给浏览器。如果你在一个组件中插入新的CSS,然后 React让出线程，浏览器必须检查这些CSS是否适用于现有的树。所以它重新计算样式规则。然后React渲染下一个组件，然后这个组件发现新 CSS，那么这个过程会循环往复。</p><p>总结来说，css-in-js在运行时插入样式会阻塞 React 的渲染，进而拖慢整个页面的渲染速度，当组件频繁的渲染时就会出现明显的性能瓶颈。 这个问题目前看来是无解的，因为运行时css-in-js库的工作方式就是组件渲染时插入新样式规则，这在根本上和性能是对立的。</p><p>2.css-in-js增加了包体积 相比于原生CSS写法或者CSS module方案来说，css-in-js会引入而外的运行时代码（Emotion是7.9 kB压缩后，styled-components是12.7kB）。 多个不同（甚至是相同）版本的 css-in-js 库同时加载时可能导致错误（example issue）。 不同React版本的 SSR，css-in-js需要适配不同的实现（example issue）</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,137),y={href:"https://juejin.cn/post/6844903949674233863",target:"_blank",rel:"noopener noreferrer"},S={href:"https://juejin.cn/post/6844903618059960333?searchId=202407302047148A2ACCA2380BDC715108",target:"_blank",rel:"noopener noreferrer"},v={href:"https://juejin.cn/post/6905539198107942919",target:"_blank",rel:"noopener noreferrer"},C={href:"https://juejin.cn/post/7283422522535673856?searchId=20240325151703FB8B0D6C3623661AA21F",target:"_blank",rel:"noopener noreferrer"},q={href:"https://juejin.cn/post/7320655424641990682",target:"_blank",rel:"noopener noreferrer"};function w(_,F){const s=e("ExternalLinkIcon");return l(),o("div",null,[x,n("p",null,[n("a",y,[t("关于object-fit使用"),a(s)]),n("a",S,[t("CSS深入理解之line-height"),a(s)]),n("a",v,[a(s)]),n("a",C,[t("Sass(Scss)、Less的区别与选择 + 基本使用"),a(s)]),n("a",q,[t("有了它Antd样式覆盖不要太爽"),a(s)])])])}const z=p(f,[["render",w],["__file","qita.html.vue"]]),j=JSON.parse('{"path":"/blogs/technology/CSS/qita.html","title":"其他","lang":"en-US","frontmatter":{"title":"其他","date":"2024/07/01","tags":["CSS"],"categories":["CSS"]},"headers":[{"level":2,"title":"object-fit使用","slug":"object-fit使用","link":"#object-fit使用","children":[]},{"level":2,"title":"nth-child和nth-of-type区别","slug":"nth-child和nth-of-type区别","link":"#nth-child和nth-of-type区别","children":[{"level":3,"title":"nth-child","slug":"nth-child","link":"#nth-child","children":[]},{"level":3,"title":"nth-of-type","slug":"nth-of-type","link":"#nth-of-type","children":[]}]},{"level":2,"title":"如何对项目中的图片进行优化","slug":"如何对项目中的图片进行优化","link":"#如何对项目中的图片进行优化","children":[]},{"level":2,"title":"常见的图片格式及使用场景","slug":"常见的图片格式及使用场景","link":"#常见的图片格式及使用场景","children":[]},{"level":2,"title":"为什么不建议对图片进行gzip压缩","slug":"为什么不建议对图片进行gzip压缩","link":"#为什么不建议对图片进行gzip压缩","children":[]},{"level":2,"title":"display的block、inline和inline-block的区别","slug":"display的block、inline和inline-block的区别","link":"#display的block、inline和inline-block的区别","children":[]},{"level":2,"title":"display:inline-block什么时候会显示间隙？","slug":"display-inline-block什么时候会显示间隙","link":"#display-inline-block什么时候会显示间隙","children":[]},{"level":2,"title":"块级元素和行内元素区别","slug":"块级元素和行内元素区别","link":"#块级元素和行内元素区别","children":[{"level":3,"title":"块级元素","slug":"块级元素","link":"#块级元素","children":[]},{"level":3,"title":"行内元素","slug":"行内元素","link":"#行内元素","children":[]}]},{"level":2,"title":"隐藏元素的方法有哪些","slug":"隐藏元素的方法有哪些","link":"#隐藏元素的方法有哪些","children":[]},{"level":2,"title":"link和@import的区别","slug":"link和-import的区别","link":"#link和-import的区别","children":[]},{"level":2,"title":"transform、transition和animation的区别","slug":"transform、transition和animation的区别","link":"#transform、transition和animation的区别","children":[]},{"level":2,"title":"伪元素和伪类的区别和作用？","slug":"伪元素和伪类的区别和作用","link":"#伪元素和伪类的区别和作用","children":[]},{"level":2,"title":"对requestAnimationframe的理解","slug":"对requestanimationframe的理解","link":"#对requestanimationframe的理解","children":[]},{"level":2,"title":"requestAnimationFrame和requestIdleCallback有什么区别？","slug":"requestanimationframe和requestidlecallback有什么区别","link":"#requestanimationframe和requestidlecallback有什么区别","children":[]},{"level":2,"title":"对盒模型的理解","slug":"对盒模型的理解","link":"#对盒模型的理解","children":[]},{"level":2,"title":"为什么有时候⽤translate来改变位置⽽不是定位？","slug":"为什么有时候用translate来改变位置而不是定位","link":"#为什么有时候用translate来改变位置而不是定位","children":[]},{"level":2,"title":"li与li之间有看不见的空白间隔是什么原因引起的？如何解决？","slug":"li与li之间有看不见的空白间隔是什么原因引起的-如何解决","link":"#li与li之间有看不见的空白间隔是什么原因引起的-如何解决","children":[]},{"level":2,"title":"CSS3中有哪些新特性","slug":"css3中有哪些新特性","link":"#css3中有哪些新特性","children":[]},{"level":2,"title":"对CSSSprites的理解","slug":"对csssprites的理解","link":"#对csssprites的理解","children":[]},{"level":2,"title":"什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x、@2x这种图片？","slug":"什么是物理像素-逻辑像素和像素密度-为什么在移动端开发时需要用到-3x、-2x这种图片","link":"#什么是物理像素-逻辑像素和像素密度-为什么在移动端开发时需要用到-3x、-2x这种图片","children":[]},{"level":2,"title":"对line-height的理解及其赋值方式","slug":"对line-height的理解及其赋值方式","link":"#对line-height的理解及其赋值方式","children":[{"level":3,"title":"line-height的概念","slug":"line-height的概念","link":"#line-height的概念","children":[]},{"level":3,"title":"line-height的赋值方式","slug":"line-height的赋值方式","link":"#line-height的赋值方式","children":[]}]},{"level":2,"title":"CSS优化和提高性能的方法有哪些？","slug":"css优化和提高性能的方法有哪些","link":"#css优化和提高性能的方法有哪些","children":[]},{"level":2,"title":"CSS预处理器/后处理器是什么？为什么要使用它们？","slug":"css预处理器-后处理器是什么-为什么要使用它们","link":"#css预处理器-后处理器是什么-为什么要使用它们","children":[]},{"level":2,"title":"单行、多行文本溢出隐藏","slug":"单行、多行文本溢出隐藏","link":"#单行、多行文本溢出隐藏","children":[]},{"level":2,"title":"对媒体查询的理解？","slug":"对媒体查询的理解","link":"#对媒体查询的理解","children":[]},{"level":2,"title":"如何判断元素是否到达可视区域？？","slug":"如何判断元素是否到达可视区域","link":"#如何判断元素是否到达可视区域","children":[]},{"level":2,"title":"z-index属性在什么情况下会失效","slug":"z-index属性在什么情况下会失效","link":"#z-index属性在什么情况下会失效","children":[]},{"level":2,"title":"说说什么是BFC?","slug":"说说什么是bfc","link":"#说说什么是bfc","children":[]},{"level":2,"title":"为什么需要清除浮动？清除浮动的方式","slug":"为什么需要清除浮动-清除浮动的方式","link":"#为什么需要清除浮动-清除浮动的方式","children":[]},{"level":2,"title":"元素的层叠顺序","slug":"元素的层叠顺序","link":"#元素的层叠顺序","children":[]},{"level":2,"title":"水平垂直居中的实现","slug":"水平垂直居中的实现","link":"#水平垂直居中的实现","children":[]},{"level":2,"title":"实现一个三角形","slug":"实现一个三角形","link":"#实现一个三角形","children":[]},{"level":2,"title":"实现一个扇形","slug":"实现一个扇形","link":"#实现一个扇形","children":[]},{"level":2,"title":"设置小于12px的字体","slug":"设置小于12px的字体","link":"#设置小于12px的字体","children":[]},{"level":2,"title":"CSS-in-JS 的优点和缺陷","slug":"css-in-js-的优点和缺陷","link":"#css-in-js-的优点和缺陷","children":[{"level":3,"title":"优势","slug":"优势","link":"#优势","children":[]},{"level":3,"title":"缺点","slug":"缺点","link":"#缺点","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1719836602000,"updatedTime":1725723914000,"contributors":[{"name":"zhuxiaoying","email":"zhuxiaoying@meituan.com","commits":11}]},"filePathRelative":"blogs/technology/CSS/其他.md"}');export{z as comp,j as data};
