import{_ as e,r as o,o as c,c as l,a as n,b as s,d as p,e as t}from"./app-COjMlnxi.js";const r={},i=t(`<h2 id="什么是typescript" tabindex="-1"><a class="header-anchor" href="#什么是typescript"><span>什么是TypeScript？</span></a></h2><p>Typescript是一个强类型的JavaScript超集，支持ES6语法，支持面向对象编程的概念，如类、接口、继承、泛型等。Typescript并不直接在浏览器上运行，需要编译器编译成纯Javascript来运行。</p><h2 id="为什么要使用typescript-typescript相对于javascript的优势是什么" tabindex="-1"><a class="header-anchor" href="#为什么要使用typescript-typescript相对于javascript的优势是什么"><span>为什么要使用TypeScript?TypeScript相对于JavaScript的优势是什么？</span></a></h2><p>增加了静态类型，可以在开发人员编写脚本时检测错误，使得代码质量更好，更健壮。 优势: 1.杜绝手误导致的变量名写错; 2.类型可以一定程度上充当文档; 3.IDE自动填充，自动联想;</p><h2 id="typescript中const和readonly的区别-枚举和常量枚举的区别-接口和类型别名的区别" tabindex="-1"><a class="header-anchor" href="#typescript中const和readonly的区别-枚举和常量枚举的区别-接口和类型别名的区别"><span>TypeScript中const和readonly的区别？枚举和常量枚举的区别？接口和类型别名的区别？</span></a></h2><p>const: 用于声明常量变量，块级作用域，值在初始化后不能修改 readonly: 用于声明只读属性，通常在类和接口中使用，属性在初始化后不能修改。</p><p>枚举: 定义一组命名常量，编译后生成相应的JavaScript代码 常量枚举: 编译时被完全移除，只包含枚举成员的值，减少生成的JavaScript代码量。</p><pre><code class="language-js"><span class="token comment">// 枚举</span>
<span class="token keyword">enum</span> Color <span class="token punctuation">{</span>
  Red<span class="token punctuation">,</span>
  Green<span class="token punctuation">,</span>
  Blue
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">myColor</span><span class="token operator">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myColor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 1</span>

<span class="token comment">// 常量枚举</span>
<span class="token keyword">const</span> <span class="token keyword">enum</span> Color <span class="token punctuation">{</span>
  Red<span class="token punctuation">,</span>
  Green<span class="token punctuation">,</span>
  Blue
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">myColor</span><span class="token operator">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myColor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 1</span>
</code></pre><p>接口: 定义对象的结构、类型、方法等，可以被类实现或扩展。 类型别名: 为任何类型创建一个新的名称，不能被实现或继承。</p><pre><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

type Person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><h2 id="typescript中any类型的作用是什么" tabindex="-1"><a class="header-anchor" href="#typescript中any类型的作用是什么"><span>TypeScript中any类型的作用是什么？</span></a></h2><p>为编程阶段还不清楚类型的变量指定一个类型。这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。</p><h2 id="typescript中any、never、unknown、null-undefined和void有什么区别" tabindex="-1"><a class="header-anchor" href="#typescript中any、never、unknown、null-undefined和void有什么区别"><span>TypeScript中any、never、unknown、null&amp;undefined和void有什么区别？</span></a></h2><p>any: 动态的变量类型（失去了类型检查的作用）。 never: 永不存在的值的类型。例如：never类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型。 unknown: 任何类型的值都可以赋给unknown类型，但是unknown类型的值只能赋给unknown本身和any类型。 null&amp;undefined: 默认情况下null和undefined是所有类型的子类型。就是说你可以把null和undefined赋值给number类型的变量。当你指定了--strictNullChecks标记，null和undefined只能赋值给void和它们各自。 void: 没有任何类型。例如：一个函数如果没有返回值，那么返回值可以定义为void。</p><h2 id="typescript中interface可以给function-array-class-indexable-做声明吗" tabindex="-1"><a class="header-anchor" href="#typescript中interface可以给function-array-class-indexable-做声明吗"><span>TypeScript中interface可以给Function/Array/Class（Indexable）做声明吗？</span></a></h2><pre><code class="language-js"><span class="token comment">/* 可以 */</span>
<span class="token comment">// 函数声明</span>
<span class="token keyword">interface</span> <span class="token class-name">Say</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>name<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> viod<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token literal-property property">say</span><span class="token operator">:</span> Say <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span><span class="token parameter">viod</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// Array 声明</span>
<span class="token keyword">interface</span> <span class="token class-name">NumberArray</span> <span class="token punctuation">{</span> 
 <span class="token punctuation">[</span>index<span class="token operator">:</span> number<span class="token punctuation">]</span><span class="token operator">:</span> number<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token keyword">let</span> <span class="token literal-property property">fibonacci</span><span class="token operator">:</span> NumberArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Class 声明</span>
<span class="token keyword">interface</span> <span class="token class-name">PersonalIntl</span> <span class="token punctuation">{</span>
 <span class="token literal-property property">name</span><span class="token operator">:</span> string
 <span class="token function">sayHi</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> string
<span class="token punctuation">}</span>
</code></pre><h2 id="typescript中可以使用string、number、boolean、symbol、object等给类型做声明吗" tabindex="-1"><a class="header-anchor" href="#typescript中可以使用string、number、boolean、symbol、object等给类型做声明吗"><span>TypeScript中可以使用String、Number、Boolean、Symbol、Object等给类型做声明吗？</span></a></h2><pre><code class="language-js"><span class="token comment">/* 可以 */</span>
<span class="token keyword">let</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&quot;bob&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">decLiteral</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">isDone</span><span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">sym</span><span class="token operator">:</span> symbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
 <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
 <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="typescript中的this和javascript中的this有什么差异" tabindex="-1"><a class="header-anchor" href="#typescript中的this和javascript中的this有什么差异"><span>TypeScript中的this和JavaScript中的this有什么差异？</span></a></h2><p>Javascript: this的值取决于函数调用的方式 TypeScript: 提供了类型检查和一些特定功能，增强了this的可读性和可靠性。允许显式声明this参数，控制this的类型</p><h2 id="typescript中使用union-types-联合类型-时有哪些注意事项" tabindex="-1"><a class="header-anchor" href="#typescript中使用union-types-联合类型-时有哪些注意事项"><span>TypeScript中使用Union Types[联合类型]时有哪些注意事项？</span></a></h2><p>属性或方法访问: 当TypeScript不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法。</p><pre><code class="language-js"><span class="token keyword">function</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">something</span><span class="token operator">:</span> string <span class="token operator">|</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>
   <span class="token keyword">return</span> something<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// index.ts(2,22): error TS2339: Property &#39;length&#39; does not exist on type &gt;&#39;string | number&#39;.</span>
<span class="token comment">//   Property &#39;length&#39; does not exist on type &#39;number&#39;.</span>

<span class="token keyword">function</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">something</span><span class="token operator">:</span> string <span class="token operator">|</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>
   <span class="token keyword">return</span> something<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="typescript如何设计class的声明" tabindex="-1"><a class="header-anchor" href="#typescript如何设计class的声明"><span>TypeScript如何设计Class的声明？</span></a></h2><pre><code class="language-js"><span class="token comment">// 在声明类的时候，一般类中都会包含构造函数、对构造函数中的属性进行类型声明、类中的方法</span>
<span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">greeting</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
   <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">message</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> message<span class="token punctuation">;</span>
   <span class="token punctuation">}</span> 
   <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> string<span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>greeting<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> greeter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeter</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="typescript中如何联合枚举类型的key" tabindex="-1"><a class="header-anchor" href="#typescript中如何联合枚举类型的key"><span>TypeScript中如何联合枚举类型的Key?</span></a></h2><pre><code class="language-js"><span class="token keyword">enum</span> str <span class="token punctuation">{</span>
   <span class="token constant">A</span><span class="token punctuation">,</span>
   <span class="token constant">B</span><span class="token punctuation">,</span>
   <span class="token constant">C</span>
<span class="token punctuation">}</span>
type strUnion <span class="token operator">=</span>  keyof <span class="token keyword">typeof</span> str<span class="token punctuation">;</span> <span class="token comment">// &#39;A&#39; | &#39;B&#39; | &#39;C&#39;</span>
</code></pre><h2 id="typescript中type和interface的区别" tabindex="-1"><a class="header-anchor" href="#typescript中type和interface的区别"><span>TypeScript中type和interface的区别?</span></a></h2><h3 id="相同点" tabindex="-1"><a class="header-anchor" href="#相同点"><span>相同点</span></a></h3><p>1.interface和type都可以用于定义对象类型</p><pre><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

type Person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>2.interface使用extends关键字扩展，type使用交叉类型扩展</p><pre><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">employeeId</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

type Employee <span class="token operator">=</span> Person <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">employeeId</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><h3 id="不同点" tabindex="-1"><a class="header-anchor" href="#不同点"><span>不同点</span></a></h3><p>1.interface支持声明合并，type不支持</p><pre><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>2.type可以定义联合类型、元组类型等复杂类型，interface主要用于定义对象类型</p><pre><code class="language-js">type StringOrNumber <span class="token operator">=</span> string <span class="token operator">|</span> number<span class="token punctuation">;</span>
type Tuple <span class="token operator">=</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><p>3.interface可以被类实现，type不能</p><pre><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
  <span class="token literal-property property">employeeId</span><span class="token operator">:</span> number<span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">employeeId</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>employeeId <span class="token operator">=</span> employeeId<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="typescript-中-、-、-、-、-、-等符号的含义" tabindex="-1"><a class="header-anchor" href="#typescript-中-、-、-、-、-、-等符号的含义"><span>TypeScript 中 ?.、??、!、!.、_、**等符号的含义？</span></a></h2><p><code>?.</code> 可选链遇到null和undefined可以立即停止表达式的运行。 <code>??</code> 空值合并运算符，当左侧操作数为null或undefined时，其返回右侧的操作数，否则返回左侧的操作数。 <code>!</code> 非空断言运算符x!，将从x值域中排除null和undefined <code>!.</code> 在变量名后添加，可以断言排除undefined和null类型 <code>_</code> 数字分割符分隔符不会改变数值字面量的值，使人更容易读懂数字 .e.g 1_101_324。 <code>**</code> 求幂, <code>2**3=8</code></p><h2 id="简单介绍一下typescript模块的加载机制" tabindex="-1"><a class="header-anchor" href="#简单介绍一下typescript模块的加载机制"><span>简单介绍一下TypeScript模块的加载机制？</span></a></h2><p>假设有一个导入语句import { a } from &quot;moduleA&quot;;</p><ol><li>首先，编译器会尝试定位需要导入的模块文件，通过绝对或者相对的路径查找方式；</li><li>如果上面的解析失败了，没有查找到对应的模块，编译器会尝试定位一个外部模块声明（.d.ts）；</li><li>最后，如果编译器还是不能解析这个模块，则会抛出一个错误error TS2307: Cannot find module &#39;moduleA&#39;.</li></ol><h2 id="简单聊聊你对typescript类型兼容性的理解" tabindex="-1"><a class="header-anchor" href="#简单聊聊你对typescript类型兼容性的理解"><span>简单聊聊你对TypeScript类型兼容性的理解？</span></a></h2><p>ts类型兼容：当一个类型Y可以赋值给另一个类型X时，我们就可以说类型X兼容类型Y。也就是说两者在结构上是一致的，而不一定非得通过extends的方式继承而来 接口的兼容性：X = Y只要目标类型X中声明的属性变量在源类型Y中都存在就是兼容的（ Y中的类型可以比X中的多，但是不能少） 函数的兼容性：X = Y Y的每个参数必须能在X里找到对应类型的参数，参数的名字相同与否无所谓，只看它们的类型（参数可以少但是不能多。与接口的兼容性有区别，原因参考第 17 问）</p><h2 id="协变、逆变、双变和抗变的理解" tabindex="-1"><a class="header-anchor" href="#协变、逆变、双变和抗变的理解"><span>协变、逆变、双变和抗变的理解？</span></a></h2><p>协变：X = Y，Y类型可以赋值给X类型的情况就叫做协变，也可以说是X类型兼容Y类型</p><pre><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">X</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span> age<span class="token operator">:</span> number<span class="token punctuation">;</span> <span class="token punctuation">}</span> 
<span class="token keyword">interface</span> <span class="token class-name">Y</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span> age<span class="token operator">:</span> number<span class="token punctuation">;</span> hobbies<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token constant">X</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;xiaoming&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token constant">Y</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;xiaohong&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token literal-property property">hobbies</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;eat&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
x <span class="token operator">=</span> y
</code></pre><p>逆变：printY=printX，函数X类型可以赋值给函数Y类型，因为函数Y在调用的时候参数是按照Y类型进行约束的，但是用到的是函数X的X的属性和方法，ts检查结果是类型安全的。这种特性就叫做逆变，函数的参数有逆变的性质。</p><pre><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">printY</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token constant">Y</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token function-variable function">printY</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token function-variable function">printX</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token constant">X</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token function-variable function">printX</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">}</span>
printY <span class="token operator">=</span> printX
</code></pre><p>双变（双向协变）：X = Y；Y = X父类型可以赋值给子类型，子类型可以赋值给父类型，既逆变又协变，叫做“双向协变”（ts2.x 之前支持这种赋值，之后 ts 加了一个编译选项 strictFunctionTypes，设置为 true 就只支持函数参数的逆变，设置为 false 则支持双向协变） 抗变（不变）：非父子类型之间不会发生型变，只要类型不一样就会报错</p><h2 id="typescript中对象展开会有什么副作用吗" tabindex="-1"><a class="header-anchor" href="#typescript中对象展开会有什么副作用吗"><span>TypeScript中对象展开会有什么副作用吗？</span></a></h2><p>展开对象后面的属性会覆盖前面的属性；仅包含对象自身的可枚举属性，不可枚举的属性将会丢失。</p><h2 id="类型的全局声明和局部声明" tabindex="-1"><a class="header-anchor" href="#类型的全局声明和局部声明"><span>类型的全局声明和局部声明</span></a></h2><p>如果声明文件内不包含import、export，那么这个文件声明的类型就会变成全局声明。反之，若是这个文件包含了import、export，那么这个文件包含的类型声明则会是局部声明，不会影响到全局声明。</p><h2 id="typescript中同名的interface或者同名的interface和class可以合并吗" tabindex="-1"><a class="header-anchor" href="#typescript中同名的interface或者同名的interface和class可以合并吗"><span>TypeScript中同名的interface或者同名的interface和class可以合并吗？</span></a></h2><ul><li>同名的interface会自动合并,它们的成员会被合并到一个接口中。</li><li>同名的interface和class不能直接合并，但可以通过interface扩展class的静态部分来实现类似的效果</li></ul><pre><code class="language-js"><span class="token comment">// 同名的interface会自动合并</span>
<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">person</span><span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: { name: &quot;John&quot;, age: 30 }</span>
</code></pre><pre><code class="language-js"><span class="token comment">// 通过interface扩展class的静态部分来实现类似的效果</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
</code></pre><pre><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用命名空间扩展类</span>
namespace Person <span class="token punctuation">{</span>
    <span class="token keyword">export</span> <span class="token keyword">let</span> defaultAge <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> Person <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Person { name: &quot;John&quot; }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>defaultAge<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 30</span>
</code></pre><h2 id="如何使typescript项目引入并识别编译为javascript的npm库包" tabindex="-1"><a class="header-anchor" href="#如何使typescript项目引入并识别编译为javascript的npm库包"><span>如何使TypeScript项目引入并识别编译为JavaScript的npm库包？</span></a></h2><ol><li>选择安装ts版本，npm install @types/包名 --save；</li><li>对于没有类型的js库，需要编写同名的.d.ts文件</li></ol><h2 id="typescript的tsconfig-json中有哪些配置项信息" tabindex="-1"><a class="header-anchor" href="#typescript的tsconfig-json中有哪些配置项信息"><span>TypeScript的tsconfig.json中有哪些配置项信息？</span></a></h2><pre><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;compileOnSave&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> 
    <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
        <span class="token property">&quot;@helper/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/helper/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
        <span class="token property">&quot;@utils/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/utils/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
         ... 
        <span class="token punctuation">}</span> 
   <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><ul><li>files: 一个数组列表，里面包含指定文件的相对或绝对路径，用来指定待编译文件，编译器在编译的时候只会编译包含在files中列出的文件,files依赖的文件不会编译。</li><li>include&amp;exclude: 指定编译某些文件，或者指定排除某些文件。</li><li>compileOnSave:true 让IDE在保存文件的时候根据tsconfig.json重新生成文件。</li><li>extends: 可以通过指定一个其他的tsconfig.json文件路径，来继承这个配置文件里的配置。</li><li>compilerOptions: 编译配置项，如何对具体的ts文件进行编译</li><li>paths: 设置模块导入的路径别名</li></ul><h2 id="files和include的区别" tabindex="-1"><a class="header-anchor" href="#files和include的区别"><span>files和include的区别</span></a></h2><h3 id="显式列出vs模式匹配" tabindex="-1"><a class="header-anchor" href="#显式列出vs模式匹配"><span>显式列出vs模式匹配</span></a></h3><p>files：显式列出每个文件 include：使用模式匹配多个文件</p><h3 id="精确控制vs灵活性" tabindex="-1"><a class="header-anchor" href="#精确控制vs灵活性"><span>精确控制vs灵活性</span></a></h3><p>files：精确控制要编译的文件 include：灵活匹配多个文件或文件夹</p><h3 id="自动包含依赖文件" tabindex="-1"><a class="header-anchor" href="#自动包含依赖文件"><span>自动包含依赖文件</span></a></h3><p>files：不自动包含依赖文件 include：自动包含依赖文件</p><h2 id="declare-declare-global是什么" tabindex="-1"><a class="header-anchor" href="#declare-declare-global是什么"><span>declare，declare global是什么？</span></a></h2><p>declare是用来定义全局变量、全局函数、全局命名空间、js modules、class等 declare global为全局对象 window 增加新的属性</p><pre><code class="language-js">declare global <span class="token punctuation">{</span> 
   <span class="token keyword">interface</span> <span class="token class-name">Window</span> <span class="token punctuation">{</span> 
        <span class="token literal-property property">csrf</span><span class="token operator">:</span> string<span class="token punctuation">;</span> 
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="对typescript类中成员的public、private、protected、readonly修饰符的理解" tabindex="-1"><a class="header-anchor" href="#对typescript类中成员的public、private、protected、readonly修饰符的理解"><span>对TypeScript类中成员的public、private、protected、readonly修饰符的理解？</span></a></h2><p>public: 成员都默认为public，被此限定符修饰的成员是可以被外部访问； private: 被此限定符修饰的成员是只可以被类的内部访问； protected: 被此限定符修饰的成员是只可以被类的内部以及类的子类访问; readonly: 关键字将属性设置为只读的。只读属性必须在声明时或构造函数里被初始化。</p><h2 id="keyof和typeof关键字的作用" tabindex="-1"><a class="header-anchor" href="#keyof和typeof关键字的作用"><span>keyof和typeof关键字的作用？</span></a></h2><p>keyof:获取索引类型的属性名，构成联合类型。 typeof:获取一个变量或对象的类型。</p><h2 id="简述工具类型exclude、omit、merge、intersection、overwrite的作用" tabindex="-1"><a class="header-anchor" href="#简述工具类型exclude、omit、merge、intersection、overwrite的作用"><span>简述工具类型Exclude、Omit、Merge、Intersection、Overwrite的作用</span></a></h2><p>Exclude&lt;T, U&gt; 从 T 中排除出可分配给 U的元素。 Omit&lt;T, K&gt; 的作用是忽略T中的某些属性。 Merge&lt;O1, O2&gt; 是将两个对象的属性合并。 Compute&lt;A &amp; B&gt; 是将交叉类型合并 Intersection&lt;T, U&gt;的作用是取T的属性,此属性同样也存在与U。 Overwrite&lt;T, U&gt; 是用U的属性覆盖T的相同属性。</p><h2 id="数组定义的两种方式" tabindex="-1"><a class="header-anchor" href="#数组定义的两种方式"><span>数组定义的两种方式</span></a></h2><pre><code class="language-js">type Foo<span class="token operator">=</span> Array<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span> 
     <span class="token literal-property property">baz</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">}</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

type Foo <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span> 
     <span class="token literal-property property">baz</span> <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> number <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span> 
<span class="token punctuation">}</span>
</code></pre><h2 id="装饰器" tabindex="-1"><a class="header-anchor" href="#装饰器"><span>装饰器</span></a></h2><p>装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上。装饰器使用@expression这种形式，expression求值后必须为一个函数，它会在运行时被调用，被装饰的声明信息作为参数传入。</p>`,87),u={href:"https://juejin.cn/post/7202812701440589881?searchId=202408301732450B1B84C24DFF768E24F1",target:"_blank",rel:"noopener noreferrer"},k=t(`<h2 id="使用过decorator和symbol么" tabindex="-1"><a class="header-anchor" href="#使用过decorator和symbol么"><span>使用过decorator和symbol么？</span></a></h2><p>装饰器(Decorator): 一种用于修改类、方法、属性或参数的声明性语法。它们以@符号开头，通常放置在类、方法或属性之前，并可以通过添加元数据或修改行为来扩展或修改它们的行为。 符号(Symbol): JavaScript中的一种基本数据类型，用于创建唯一的、不可变的标识符。符号可以用来创建对象的私有成员、隐藏内部实现细节，或用作对象属性的键，以确保属性名称的唯一性。</p><h2 id="ts中never和void有什么区别" tabindex="-1"><a class="header-anchor" href="#ts中never和void有什么区别"><span>TS中never和void有什么区别？</span></a></h2><h3 id="void" tabindex="-1"><a class="header-anchor" href="#void"><span>void</span></a></h3><p>void表示函数没有返回值，或者说函数返回的是undefined。 当一个函数没有显式指定返回值类型时，它的返回类型默认为void。 不能对void类型的变量赋予除undefined以外的值。</p><h3 id="never" tabindex="-1"><a class="header-anchor" href="#never"><span>never</span></a></h3><p>never表示函数永远不会正常返回，或者说函数会抛出异常或无限循环。 通常never类型用于表示永远不会执行完的函数或抛出异常的函数，或者在类型系统中表示不可能发生的情况。 可以将never类型赋值给任何其他类型，但是反过来不行。</p><h2 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符"><span>修饰符</span></a></h2><h3 id="public" tabindex="-1"><a class="header-anchor" href="#public"><span>public</span></a></h3><p>默认修饰符：如果没有显式指定修饰符，成员默认是public。 访问权限：可以在类的内部、子类以及类的外部访问。</p><pre><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">move</span><span class="token punctuation">(</span>distance<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>distance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> meters.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">&#39;Dog&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以访问</span>
dog<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以访问</span>
</code></pre><h3 id="private" tabindex="-1"><a class="header-anchor" href="#private"><span>private</span></a></h3><p>访问权限：只能在类的内部访问，不能在类的外部或子类中访问。</p><pre><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">move</span><span class="token punctuation">(</span>distance<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>distance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> meters.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">&#39;Dog&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// console.log(dog.name); // 错误: 属性“name”是私有的，不能在类的外部访问</span>
dog<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以访问</span>
</code></pre><h3 id="protected" tabindex="-1"><a class="header-anchor" href="#protected"><span>protected</span></a></h3><p>访问权限：可以在类的内部和子类中访问，但不能在类的外部访问</p><pre><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">move</span><span class="token punctuation">(</span>distance<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>distance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> meters.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is barking.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以访问</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;Dog&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// console.log(dog.name); // 错误: 属性“name”受保护，不能在类的外部访问</span>
dog<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以访问</span>
dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以访问</span>
</code></pre><h3 id="readonly" tabindex="-1"><a class="header-anchor" href="#readonly"><span>readonly</span></a></h3><p>访问权限：可以在类的内部和外部访问，但只能在声明时或构造函数中赋值，不能在其他地方修改。</p><pre><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> readonly name<span class="token operator">:</span> string<span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">move</span><span class="token punctuation">(</span>distance<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>distance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> meters.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">&#39;Dog&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以访问</span>
<span class="token comment">// dog.name = &#39;Cat&#39;; // 错误: 无法分配到 &quot;name&quot; ，因为它是只读属性</span>
dog<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以访问</span>
</code></pre><h3 id="修饰符组合" tabindex="-1"><a class="header-anchor" href="#修饰符组合"><span>修饰符组合</span></a></h3><p>修饰符可以组合使用，例如protected readonly，表示成员既是受保护的，又是只读的：</p><pre><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> readonly name<span class="token operator">:</span> string<span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">move</span><span class="token punctuation">(</span>distance<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>distance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> meters.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is barking.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以访问</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;Dog&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// console.log(dog.name); // 错误: 属性“name”受保护，不能在类的外部访问</span>
dog<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以访问</span>
dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以访问</span>
</code></pre><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,24),d={href:"https://juejin.cn/post/6999985372440559624?searchId=202408011553468D2E043AF0EBBE5F6153",target:"_blank",rel:"noopener noreferrer"};function y(m,g){const a=o("ExternalLinkIcon");return c(),l("div",null,[i,n("p",null,[s("参考"),n("a",u,[s("装饰器"),p(a)])]),k,n("p",null,[n("a",d,[s("TypeScript TS"),p(a)])])])}const f=e(r,[["render",y],["__file","typescript.html.vue"]]),b=JSON.parse('{"path":"/blogs/technology/JS/typescript.html","title":"Typescript","lang":"en-US","frontmatter":{"title":"Typescript","date":"2024/08/01","tags":["javascript"],"categories":["javascript"]},"headers":[{"level":2,"title":"什么是TypeScript？","slug":"什么是typescript","link":"#什么是typescript","children":[]},{"level":2,"title":"为什么要使用TypeScript?TypeScript相对于JavaScript的优势是什么？","slug":"为什么要使用typescript-typescript相对于javascript的优势是什么","link":"#为什么要使用typescript-typescript相对于javascript的优势是什么","children":[]},{"level":2,"title":"TypeScript中const和readonly的区别？枚举和常量枚举的区别？接口和类型别名的区别？","slug":"typescript中const和readonly的区别-枚举和常量枚举的区别-接口和类型别名的区别","link":"#typescript中const和readonly的区别-枚举和常量枚举的区别-接口和类型别名的区别","children":[]},{"level":2,"title":"TypeScript中any类型的作用是什么？","slug":"typescript中any类型的作用是什么","link":"#typescript中any类型的作用是什么","children":[]},{"level":2,"title":"TypeScript中any、never、unknown、null&undefined和void有什么区别？","slug":"typescript中any、never、unknown、null-undefined和void有什么区别","link":"#typescript中any、never、unknown、null-undefined和void有什么区别","children":[]},{"level":2,"title":"TypeScript中interface可以给Function/Array/Class（Indexable）做声明吗？","slug":"typescript中interface可以给function-array-class-indexable-做声明吗","link":"#typescript中interface可以给function-array-class-indexable-做声明吗","children":[]},{"level":2,"title":"TypeScript中可以使用String、Number、Boolean、Symbol、Object等给类型做声明吗？","slug":"typescript中可以使用string、number、boolean、symbol、object等给类型做声明吗","link":"#typescript中可以使用string、number、boolean、symbol、object等给类型做声明吗","children":[]},{"level":2,"title":"TypeScript中的this和JavaScript中的this有什么差异？","slug":"typescript中的this和javascript中的this有什么差异","link":"#typescript中的this和javascript中的this有什么差异","children":[]},{"level":2,"title":"TypeScript中使用Union Types[联合类型]时有哪些注意事项？","slug":"typescript中使用union-types-联合类型-时有哪些注意事项","link":"#typescript中使用union-types-联合类型-时有哪些注意事项","children":[]},{"level":2,"title":"TypeScript如何设计Class的声明？","slug":"typescript如何设计class的声明","link":"#typescript如何设计class的声明","children":[]},{"level":2,"title":"TypeScript中如何联合枚举类型的Key?","slug":"typescript中如何联合枚举类型的key","link":"#typescript中如何联合枚举类型的key","children":[]},{"level":2,"title":"TypeScript中type和interface的区别?","slug":"typescript中type和interface的区别","link":"#typescript中type和interface的区别","children":[{"level":3,"title":"相同点","slug":"相同点","link":"#相同点","children":[]},{"level":3,"title":"不同点","slug":"不同点","link":"#不同点","children":[]}]},{"level":2,"title":"TypeScript 中 ?.、??、!、!.、_、**等符号的含义？","slug":"typescript-中-、-、-、-、-、-等符号的含义","link":"#typescript-中-、-、-、-、-、-等符号的含义","children":[]},{"level":2,"title":"简单介绍一下TypeScript模块的加载机制？","slug":"简单介绍一下typescript模块的加载机制","link":"#简单介绍一下typescript模块的加载机制","children":[]},{"level":2,"title":"简单聊聊你对TypeScript类型兼容性的理解？","slug":"简单聊聊你对typescript类型兼容性的理解","link":"#简单聊聊你对typescript类型兼容性的理解","children":[]},{"level":2,"title":"协变、逆变、双变和抗变的理解？","slug":"协变、逆变、双变和抗变的理解","link":"#协变、逆变、双变和抗变的理解","children":[]},{"level":2,"title":"TypeScript中对象展开会有什么副作用吗？","slug":"typescript中对象展开会有什么副作用吗","link":"#typescript中对象展开会有什么副作用吗","children":[]},{"level":2,"title":"类型的全局声明和局部声明","slug":"类型的全局声明和局部声明","link":"#类型的全局声明和局部声明","children":[]},{"level":2,"title":"TypeScript中同名的interface或者同名的interface和class可以合并吗？","slug":"typescript中同名的interface或者同名的interface和class可以合并吗","link":"#typescript中同名的interface或者同名的interface和class可以合并吗","children":[]},{"level":2,"title":"如何使TypeScript项目引入并识别编译为JavaScript的npm库包？","slug":"如何使typescript项目引入并识别编译为javascript的npm库包","link":"#如何使typescript项目引入并识别编译为javascript的npm库包","children":[]},{"level":2,"title":"TypeScript的tsconfig.json中有哪些配置项信息？","slug":"typescript的tsconfig-json中有哪些配置项信息","link":"#typescript的tsconfig-json中有哪些配置项信息","children":[]},{"level":2,"title":"files和include的区别","slug":"files和include的区别","link":"#files和include的区别","children":[{"level":3,"title":"显式列出vs模式匹配","slug":"显式列出vs模式匹配","link":"#显式列出vs模式匹配","children":[]},{"level":3,"title":"精确控制vs灵活性","slug":"精确控制vs灵活性","link":"#精确控制vs灵活性","children":[]},{"level":3,"title":"自动包含依赖文件","slug":"自动包含依赖文件","link":"#自动包含依赖文件","children":[]}]},{"level":2,"title":"declare，declare global是什么？","slug":"declare-declare-global是什么","link":"#declare-declare-global是什么","children":[]},{"level":2,"title":"对TypeScript类中成员的public、private、protected、readonly修饰符的理解？","slug":"对typescript类中成员的public、private、protected、readonly修饰符的理解","link":"#对typescript类中成员的public、private、protected、readonly修饰符的理解","children":[]},{"level":2,"title":"keyof和typeof关键字的作用？","slug":"keyof和typeof关键字的作用","link":"#keyof和typeof关键字的作用","children":[]},{"level":2,"title":"简述工具类型Exclude、Omit、Merge、Intersection、Overwrite的作用","slug":"简述工具类型exclude、omit、merge、intersection、overwrite的作用","link":"#简述工具类型exclude、omit、merge、intersection、overwrite的作用","children":[]},{"level":2,"title":"数组定义的两种方式","slug":"数组定义的两种方式","link":"#数组定义的两种方式","children":[]},{"level":2,"title":"装饰器","slug":"装饰器","link":"#装饰器","children":[]},{"level":2,"title":"使用过decorator和symbol么？","slug":"使用过decorator和symbol么","link":"#使用过decorator和symbol么","children":[]},{"level":2,"title":"TS中never和void有什么区别？","slug":"ts中never和void有什么区别","link":"#ts中never和void有什么区别","children":[{"level":3,"title":"void","slug":"void","link":"#void","children":[]},{"level":3,"title":"never","slug":"never","link":"#never","children":[]}]},{"level":2,"title":"修饰符","slug":"修饰符","link":"#修饰符","children":[{"level":3,"title":"public","slug":"public","link":"#public","children":[]},{"level":3,"title":"private","slug":"private","link":"#private","children":[]},{"level":3,"title":"protected","slug":"protected","link":"#protected","children":[]},{"level":3,"title":"readonly","slug":"readonly","link":"#readonly","children":[]},{"level":3,"title":"修饰符组合","slug":"修饰符组合","link":"#修饰符组合","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1722519582000,"updatedTime":1725607239000,"contributors":[{"name":"zhuxiaoying","email":"zhuxiaoying@meituan.com","commits":4}]},"filePathRelative":"blogs/technology/JS/typescript.md"}');export{f as comp,b as data};
