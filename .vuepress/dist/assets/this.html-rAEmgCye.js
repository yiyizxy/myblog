import{_ as n,o as s,c as a,e as t}from"./app-COjMlnxi.js";const p={},o=t(`<p>this永远指向一个对象； this的指向取决于函数调用的位置，或通过call、apply、bind修改 this指向跟调用有关，跟定义无关 当绑定的this指向为null的时候，则this指向了window</p><h2 id="根据绑定形式分类" tabindex="-1"><a class="header-anchor" href="#根据绑定形式分类"><span>根据绑定形式分类</span></a></h2><h3 id="默认绑定" tabindex="-1"><a class="header-anchor" href="#默认绑定"><span>默认绑定</span></a></h3><p>就是我们正常书写代码，this的指向处理，全局作用域下的this</p><h3 id="隐式绑定" tabindex="-1"><a class="header-anchor" href="#隐式绑定"><span>隐式绑定</span></a></h3><p>在函数调用时机，this的指向取决于当前上下文环境</p><h3 id="显示绑定" tabindex="-1"><a class="header-anchor" href="#显示绑定"><span>显示绑定</span></a></h3><p>通过使用apply、call、bind函数改变this指向</p><p>this 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模式来判断。</p><p>第一种是函数调用模式，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。 第二种是方法调用模式，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。 第三种是构造器调用模式，如果一个函数用new调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。 第四种是apply 、 call 和 bind调用模式，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。</p><p>这四种方式，使用构造器调用模式 &gt; apply、call 和 bind调用模式 &gt; 方法调用模式 &gt; 函数调用模式</p><h2 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数"><span>箭头函数</span></a></h2><p>箭头函数的 this 绑定 没有自己的 this：</p><p>箭头函数不创建自己的 this，它从定义它的上下文（即外层非箭头函数）中继承 this。 词法作用域： 箭头函数的this是静态的，取决于函数定义时的上下文，而非调用时的上下文。这种行为称为词法作用域（Lexical Scoping）</p><p>示例 1：简单的箭头函数</p><pre><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>
  <span class="token function-variable function">arrowFunc</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">regularFunc</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span><span class="token function">arrowFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
obj<span class="token punctuation">.</span><span class="token function">regularFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>
</code></pre><p>arrowFunc 是一个箭头函数，它没有自己的 this，所以 this 是从定义它的上下文中继承的。在这种情况下，this 指向的是全局对象（在浏览器中是 window，在 Node.js 中是 global），因此 this.value 是 undefined。 regularFunc 是一个普通的函数，它的 this 是在调用时绑定的，因此 this 指向 obj 对象，this.value 是 42。</p><p>示例 2：箭头函数在方法中的使用</p><pre><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// \`this\` 指向 Person 实例</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>setInterval中的箭头函数没有自己的this，它继承了Person构造函数中的this，即Person实例。因此，this.age正确地指向Person实例的age属性，并每秒递增一次。</p><p>示例 3：箭头函数作为回调</p><pre><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>
  <span class="token function-variable function">method</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>setTimeout 中的箭头函数没有自己的 this，它继承了 method 方法中的 this，即 obj 对象。因此，this.value 是 42。</p><h3 id="call-、apply-、bind-等方法不能改变箭头函数中this的指向" tabindex="-1"><a class="header-anchor" href="#call-、apply-、bind-等方法不能改变箭头函数中this的指向"><span>call()、apply()、bind()等方法不能改变箭头函数中this的指向</span></a></h3><pre><code class="language-js"><span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token string">&#39;Global&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token function-variable function">fun1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">// &#39;Global&#39;</span>
<span class="token function">fun1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;Obj&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// &#39;Global&#39;</span>
<span class="token function">fun1</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;Obj&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// &#39;Global&#39;</span>
<span class="token function">fun1</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;Obj&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// &#39;Global&#39;</span>
</code></pre><h3 id="箭头函数不能作为构造函数使用" tabindex="-1"><a class="header-anchor" href="#箭头函数不能作为构造函数使用"><span>箭头函数不能作为构造函数使用</span></a></h3><p>构造函数在new的步骤在上面已经说过了，实际上第二步就是将函数中的this指向该对象。 但是由于箭头函数时没有自己的this的，且this指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用。</p><h3 id="箭头函数没有自己的arguments" tabindex="-1"><a class="header-anchor" href="#箭头函数没有自己的arguments"><span>箭头函数没有自己的arguments</span></a></h3><p>箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是它外层函数的arguments值。</p><h3 id="箭头函数没有prototype" tabindex="-1"><a class="header-anchor" href="#箭头函数没有prototype"><span>箭头函数没有prototype</span></a></h3><h3 id="箭头函数不能用作generator函数-不能使用yeild关键字" tabindex="-1"><a class="header-anchor" href="#箭头函数不能用作generator函数-不能使用yeild关键字"><span>箭头函数不能用作Generator函数，不能使用yeild关键字</span></a></h3>`,31),e=[o];function c(l,i){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","this.html.vue"]]),r=JSON.parse('{"path":"/blogs/technology/JS/this.html","title":"This","lang":"en-US","frontmatter":{"title":"This","date":"2024/09/06","tags":["javascript"],"categories":["javascript"]},"headers":[{"level":2,"title":"根据绑定形式分类","slug":"根据绑定形式分类","link":"#根据绑定形式分类","children":[{"level":3,"title":"默认绑定","slug":"默认绑定","link":"#默认绑定","children":[]},{"level":3,"title":"隐式绑定","slug":"隐式绑定","link":"#隐式绑定","children":[]},{"level":3,"title":"显示绑定","slug":"显示绑定","link":"#显示绑定","children":[]}]},{"level":2,"title":"箭头函数","slug":"箭头函数","link":"#箭头函数","children":[{"level":3,"title":"call()、apply()、bind()等方法不能改变箭头函数中this的指向","slug":"call-、apply-、bind-等方法不能改变箭头函数中this的指向","link":"#call-、apply-、bind-等方法不能改变箭头函数中this的指向","children":[]},{"level":3,"title":"箭头函数不能作为构造函数使用","slug":"箭头函数不能作为构造函数使用","link":"#箭头函数不能作为构造函数使用","children":[]},{"level":3,"title":"箭头函数没有自己的arguments","slug":"箭头函数没有自己的arguments","link":"#箭头函数没有自己的arguments","children":[]},{"level":3,"title":"箭头函数没有prototype","slug":"箭头函数没有prototype","link":"#箭头函数没有prototype","children":[]},{"level":3,"title":"箭头函数不能用作Generator函数，不能使用yeild关键字","slug":"箭头函数不能用作generator函数-不能使用yeild关键字","link":"#箭头函数不能用作generator函数-不能使用yeild关键字","children":[]}]}],"git":{"createdTime":1725607239000,"updatedTime":1725607239000,"contributors":[{"name":"zhuxiaoying","email":"zhuxiaoying@meituan.com","commits":1}]},"filePathRelative":"blogs/technology/JS/this.md"}');export{k as comp,r as data};
