import{_ as o,r as l,o as r,c as t,a as n,b as e,d as s,e as p}from"./app-COjMlnxi.js";const c={},m=p(`<h2 id="npm" tabindex="-1"><a class="header-anchor" href="#npm"><span>npm</span></a></h2><h3 id="npm-v2" tabindex="-1"><a class="header-anchor" href="#npm-v2"><span>npm v2</span></a></h3><p>此时期主要是采用简单的递归依赖方法，最后形成高度嵌套的依赖树。然后就会造成如下问题：重复依赖嵌套地狱，空间资源浪费，安装速度过慢，文件路径过长等问题。</p><pre><code class="language-js">node_modules
├── <span class="token constant">A</span>@<span class="token number">1.0</span><span class="token number">.0</span>
│   └── node_modules
│       └── <span class="token constant">B</span>@<span class="token number">1.0</span><span class="token number">.0</span>
├── <span class="token constant">C</span>@<span class="token number">1.0</span><span class="token number">.0</span>
│   └── node_modules
│       └── <span class="token constant">B</span>@<span class="token number">2.0</span><span class="token number">.0</span>
└── <span class="token constant">D</span>@<span class="token number">1.0</span><span class="token number">.0</span>
    └── node_modules
        └── <span class="token constant">B</span>@<span class="token number">1.0</span><span class="token number">.0</span>
</code></pre><h3 id="npm-v3" tabindex="-1"><a class="header-anchor" href="#npm-v3"><span>npm v3</span></a></h3>`,5),d={href:"https://github.com/npm/npm/issues/8826",target:"_blank",rel:"noopener noreferrer"},i=n("pre",null,[n("code",{class:"language-shell"},`node_modules
├── A@1.0.0
├── B@1.0.0
└── C@1.0.0
    └── node_modules
        └── B@2.0.0
├── D@1.0.0
`)],-1),h=n("p",null,"V3存在一些不稳定性，举个🌰：假设A@1.0.0 依赖C@1.0.1，B@1.0.0 依赖 C@1.0.2，那么生成的node_modules结构什么样的呢？",-1),u=n("pre",null,[n("code",{class:"language-shell"},`node_modules
├── A@1.0.0
├── B@1.0.0
    └── node_modules
        └── C@1.0.2
├── C@1.0.1
// 还是下面的情况呢
node_modules
├── A@1.0.0
    └── node_modules
        └── C@1.0.1
├── B@1.0.0
├── C@1.0.2
`)],-1),k=n("p",null,"具体结构是啥，依赖A、B在package.json中的位置",-1),_=n("h3",{id:"npm-v5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#npm-v5"},[n("span",null,"npm v5")])],-1),g=n("p",null,"为了解决上面出现的扁平化依赖算法耗时长以及结构不稳定问题，npm引入package-lock.json机制，package-lock.json的作用是锁定项目的依赖结构，保证依赖的稳定性",-1),b={href:"https://docs.npmjs.com/cli/v10/configuring-npm/package-json/",target:"_blank",rel:"noopener noreferrer"},y=p('<h2 id="yarn" tabindex="-1"><a class="header-anchor" href="#yarn"><span>yarn</span></a></h2><h2 id="yarn1" tabindex="-1"><a class="header-anchor" href="#yarn1"><span>yarn1</span></a></h2><p>首先需要提出的是yarn出现时间为2016年，yarn的出现是为了解决npmv3、npm v5解决的问题，包括使用<code>yarn.lock</code>等机制，锁定版本依赖，实现并发网络请求，最大化网络资源利用率，其次还有利用缓存机制，实现了离线模式</p><p>其实后面很多<code>npm</code>都是在学习<code>yarn</code>的机制，上面的机制目前npm基本也都实现了，就目前而言npm和yarn其实并没有差异很大，具体使用npm还是yarn可以看个人需求</p><p>yarn与npm的区别：</p><p><code>package-lock.json</code>与<code>yarn.lock</code>格式上有差异。</p>',6),v=n("code",null,"package-lock.json",-1),f=n("code",null,"node_modules",-1),x=n("code",null,"yarn.lock",-1),j=n("code",null,"package.json",-1),B={href:"https://github.com/fengliner/blog/issues/3",target:"_blank",rel:"noopener noreferrer"},w=p('<h2 id="yarn2" tabindex="-1"><a class="header-anchor" href="#yarn2"><span>yarn2</span></a></h2><p>yarn2版本是无<code>node_modules</code>模式，可以加快项目安装速度，同时大大缩减删除一整个项目的速度。</p><p><code>npm install -g yarn@berry</code></p><h2 id="pnpm" tabindex="-1"><a class="header-anchor" href="#pnpm"><span>pnpm</span></a></h2><p>中文官网：pnpm - 速度快、节省磁盘空间的软件包管理器 | pnpm中文文档 | pnpm中文网</p><p>pnpm内部使用基于内容寻址的文件系统来存储磁盘上所有的文件，这样可以做到不会出现重复安装，在项目中需要使用到依赖的时候，pnpm只会安装一次，之后再次使用都会直接硬链接指向该依赖，(包是从全局store硬连接到虚拟store的，这里的虚拟store就是node_modules/.pnpm),极大节省磁盘空间，并且加快安装速度</p><p>注：硬链接是多个文件名指向同一个文件的实际内容，而软链接（符号链接）是一个独立的文件，指向另一个文件或目录的路径</p>',7),C={href:"https://classic.yarnpkg.com/en/docs/pnp/",target:"_blank",rel:"noopener noreferrer"},A=p(`<p>最后就是pnpm是默认支持monorepo多项目管理的，在日渐复杂的前端多项目开发中尤其适用，也就说我们不再需要lerna来管理多包项目，可以使用pnpm + Turborepo作为我们的项目管理环境</p><p>pnpm解决了npm、yarn存在的哪些问题？ 1.幽灵依赖问题，什么是幽灵依赖？<code>package.json</code>文件中没有相关依赖包A，但只要依赖包B依赖，项目中就可以直接引入依赖包B，假如某天A不依赖B了，则会有问题 2.当npm、yarn存在依赖多个不同版本的相同包时，只会提升1个，其余版本的包仍然存在复制多次的情况，浪费磁盘空间</p><p>还有就是pnpm还能管理nodejs版本，可以直接替代nvm，命令如下所示</p><pre><code class="language-shell"><span class="token comment"># 安装 LTS 版本</span>
<span class="token function">pnpm</span> <span class="token function">env</span> use <span class="token parameter variable">--global</span> lts
<span class="token comment"># 安装指定版本</span>
<span class="token function">pnpm</span> <span class="token function">env</span> use <span class="token parameter variable">--global</span> <span class="token number">16</span>
</code></pre><p>优点</p><ol><li>速度快：在绝大多数场景下，包安装的速度比npm/yarn快2-3倍</li><li>节省磁盘空间：会把包软链到项目本地，无需重复安装，由于基于内容寻址的文件系统来存储磁盘上的所有文件，主要表现在：1.不会重复安装同一个包2.即使包不同版本，也会最大程度的复用代码，只新增不同的部分</li><li>支持monorepo</li><li>支持管理nodejs版本</li></ol><h2 id="npm常用指令" tabindex="-1"><a class="header-anchor" href="#npm常用指令"><span>npm常用指令</span></a></h2><p>为了维护包，npm必须要使用仓库账号才允许将包发不到仓库中。注册账号的命令是npm adduser，这也是一个提问式的交互过程，按顺序即可：</p><p>查看npm包的owner:<code>npm owner ls @xxx</code></p><p>对npm包加某人权限：<code>npm owner add shirely @xxx</code></p><p>对npm包删除某人权限：<code>npm owner delete shirely @xxx</code></p><p>npm ls分析出当前路径下能够通过模块路径找到的所有的包，并生成<code>npm ls | grep @xxx</code> 查看sparrow版本</p><p>npm link 包不用发版，可以连接本地<code>npm view @xxx --json</code> 查看包各个版本信息</p><h2 id="package-json关键字段解析" tabindex="-1"><a class="header-anchor" href="#package-json关键字段解析"><span>package.json关键字段解析</span></a></h2><p>main: 定义了npm包的入口文件，browser环境和node环境均可使用 module: 定义npm包的ESM规范的入口文件，browser环境和node环境均可使用 browser: 定义npm包在browser环境下的入口文件</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,16),P={href:"https://juejin.cn/post/7076389222025789448",target:"_blank",rel:"noopener noreferrer"};function N(S,T){const a=l("ExternalLinkIcon");return r(),t("div",null,[m,n("p",null,[e("v3版本作了较大的更新，开始采取扁平化的依赖结构。这样的依赖结构可以很好的解决重复依赖的嵌套地狱问题，但是却出现扁平化依赖算法耗时长这样新的问题 官方仓库issue的解释："),n("a",d,[e("npm@3 wants to be faster · Issue #8826 · npm/npm (github.com)"),s(a)])]),i,h,u,k,_,g,n("p",null,[e("官方文档："),n("a",b,[e("package.json | npm Docs (npmjs.com)"),s(a)])]),y,n("p",null,[e("npm v5中只需要"),v,e("就可以保正确的"),f,e("目录结构，而yarn需要同时拥有"),x,e("文件和"),j,e("文件。可参考"),n("a",B,[e("Yarn的确定性"),s(a)])]),w,n("p",null,[e("也许有人说yarn默认也是扁平化安装方式，但是yarn有独特的PnP安装方式，可以直接去掉node_modules，将依赖包内容写在磁盘，节省了node文件I/O的开销，这样也能提升安装速度，但是yarn PnP 和pnpm机制是不同的，且总体来说安装速度pnpm是要快于yarn PnP的，详情请看下面"),n("a",C,[e("官方文档"),s(a)])]),A,n("p",null,[n("a",P,[e("包管理工具 —— 更推荐的pnpm"),s(a)])])])}const E=o(c,[["render",N],["__file","npm.html.vue"]]),I=JSON.parse('{"path":"/blogs/technology/kuangjia/npm.html","title":"npm yarn pnpm包管理工具演变史","lang":"en-US","frontmatter":{"title":"npm yarn pnpm包管理工具演变史","date":"2024/09/04","tags":["框架"],"categories":["框架"]},"headers":[{"level":2,"title":"npm","slug":"npm","link":"#npm","children":[{"level":3,"title":"npm v2","slug":"npm-v2","link":"#npm-v2","children":[]},{"level":3,"title":"npm v3","slug":"npm-v3","link":"#npm-v3","children":[]},{"level":3,"title":"npm v5","slug":"npm-v5","link":"#npm-v5","children":[]}]},{"level":2,"title":"yarn","slug":"yarn","link":"#yarn","children":[]},{"level":2,"title":"yarn1","slug":"yarn1","link":"#yarn1","children":[]},{"level":2,"title":"yarn2","slug":"yarn2","link":"#yarn2","children":[]},{"level":2,"title":"pnpm","slug":"pnpm","link":"#pnpm","children":[]},{"level":2,"title":"npm常用指令","slug":"npm常用指令","link":"#npm常用指令","children":[]},{"level":2,"title":"package.json关键字段解析","slug":"package-json关键字段解析","link":"#package-json关键字段解析","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1725440342000,"updatedTime":1725440342000,"contributors":[{"name":"zhuxiaoying","email":"zhuxiaoying@meituan.com","commits":1}]},"filePathRelative":"blogs/technology/框架/npm.md"}');export{E as comp,I as data};
