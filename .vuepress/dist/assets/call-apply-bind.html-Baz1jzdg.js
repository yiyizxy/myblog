import{_ as n,o as a,c as s,e as p}from"./app-BcWTENpX.js";const t={},o=p(`<h2 id="相同点" tabindex="-1"><a class="header-anchor" href="#相同点"><span>相同点</span></a></h2><p>都是改变this指向和函数的调用，call和apply功能类似，只是传参不同</p><h2 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h2><ul><li>bind与call和apply的区别在于它返回的是一个函数，不会立即执行，bind是创建时执行，其余是调用时执行时</li><li>传参上call传入的是参数列表，apply传入的是数组</li></ul><h3 id="call实现" tabindex="-1"><a class="header-anchor" href="#call实现"><span>call实现</span></a></h3><pre><code class="language-js"><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> param1<span class="token punctuation">,</span>param2<span class="token punctuation">)</span>
</code></pre><h3 id="apply实现" tabindex="-1"><a class="header-anchor" href="#apply实现"><span>apply实现</span></a></h3><p>记忆技巧： apply-a-array</p><pre><code class="language-js"><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>params1<span class="token punctuation">,</span> param2<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><h3 id="bind实现" tabindex="-1"><a class="header-anchor" href="#bind实现"><span>bind实现</span></a></h3><pre><code class="language-js"><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> param1<span class="token punctuation">,</span> param2<span class="token punctuation">,</span> param3<span class="token punctuation">)</span>
</code></pre><h3 id="手撕bind" tabindex="-1"><a class="header-anchor" href="#手撕bind"><span>手撕bind</span></a></h3><pre><code class="language-js"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
    <span class="token keyword">const</span> newThis <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> _this<span class="token punctuation">.</span><span class="token function">myApply</span><span class="token punctuation">(</span>newThis<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Function<span class="token punctuation">.</span>prototye<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    context <span class="token operator">=</span> context <span class="token operator">||</span> window
    <span class="token comment">// 挂载执行函数</span>
    context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>

    <span class="token keyword">let</span> result <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">delete</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> result

<span class="token punctuation">}</span>
</code></pre>`,13),e=[o];function c(l,i){return a(),s("div",null,e)}const r=n(t,[["render",c],["__file","call-apply-bind.html.vue"]]),k=JSON.parse('{"path":"/blogs/technology/JS/call-apply-bind.html","title":"call vs apply vs bind","lang":"en-US","frontmatter":{"title":"call vs apply vs bind","date":"2024/07/01","tags":["javascript"],"categories":["javascript"]},"headers":[{"level":2,"title":"相同点","slug":"相同点","link":"#相同点","children":[]},{"level":2,"title":"区别","slug":"区别","link":"#区别","children":[{"level":3,"title":"call实现","slug":"call实现","link":"#call实现","children":[]},{"level":3,"title":"apply实现","slug":"apply实现","link":"#apply实现","children":[]},{"level":3,"title":"bind实现","slug":"bind实现","link":"#bind实现","children":[]},{"level":3,"title":"手撕bind","slug":"手撕bind","link":"#手撕bind","children":[]}]}],"git":{"createdTime":1719836602000,"updatedTime":1721750511000,"contributors":[{"name":"zhuxiaoying","email":"zhuxiaoying@meituan.com","commits":2}]},"filePathRelative":"blogs/technology/JS/call-apply-bind.md"}');export{r as comp,k as data};
