import{_ as n,o as s,c as a,e as t}from"./app-BcWTENpX.js";const e={},p=t(`<h2 id="创建新节点" tabindex="-1"><a class="header-anchor" href="#创建新节点"><span>创建新节点</span></a></h2><h3 id="createdocumentfragment" tabindex="-1"><a class="header-anchor" href="#createdocumentfragment"><span>createDocumentFragment()</span></a></h3><p>该方法是用来创建一个虚拟的节点对象，或者说，是用来创建文档碎片节点。它可以包含各种类型的节点，在创建之初是空的。DocumentFragment不是真实DOM树的一部分，它的变化不会触发DOM树的重新渲染，且不会导致性能等问题。当把一个DocumentFragment节点插入文档树时，插入的不是DocumentFragment自身，而是它的所有子孙节点，即插入的是括号里的节点。这个特性使得 DocumentFragment 成了占位符，暂时存放那些一次插入文档的节点。</p><pre><code class="language-js"><span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>
  li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;index: &#39;</span> <span class="token operator">+</span> i
  fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span>
</code></pre><h3 id="createelement" tabindex="-1"><a class="header-anchor" href="#createelement"><span>createElement()</span></a></h3><p>document.createElement() 方法用于创建一个由标签名称tagName指定的HTML元素 来看一个例子, 对于页面已存在的<code>&lt;ul id=&quot;ul&quot;&gt;&lt;/ul&gt;</code>元素，我们想往里面添加 li 标签</p><pre><code class="language-js"><span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>
  li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;index: &#39;</span> <span class="token operator">+</span> i
  ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><p>上面操作看起来很正常，但实际要很多的插入操作和改动；而每一次的插入都会引起重新渲染，该操作会引发多次渲染，在性能优化方面，有一点是减少 DOM 操作，因为 DOM 操作导致了页面的重绘或重排。</p><h3 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h3><p>相比 createElement()方法，这次是先将这些元素添加到 fragment 中，再统一将 fragment 添加到页面，会减少页面渲染 dom 的次数，效率会明显提升。因为 fragment 文档片段存在于内存中，并不在 DOM 中，所以将子元素插入到文档片段中时不会引起页面回流（新创建的 fragment 片段在文档内是没有对应的标签的，这里添加的是片段的所有子节点）</p><h3 id="createtextnode-方法" tabindex="-1"><a class="header-anchor" href="#createtextnode-方法"><span>createTextNode()方法</span></a></h3><p>该方法会创建一个文本节点。</p><pre><code class="language-js"><span class="token keyword">var</span> h <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> t <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">)</span>
h<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
</code></pre><h3 id="dom-更改-添加、移除、替换、插入" tabindex="-1"><a class="header-anchor" href="#dom-更改-添加、移除、替换、插入"><span>DOM 更改：添加、移除、替换、插入</span></a></h3><pre><code class="language-js"><span class="token comment">// 添加、删除子元素</span>
ele<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>
ele<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>

<span class="token comment">// 替换子元素</span>
ele<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>el1<span class="token punctuation">,</span> el2<span class="token punctuation">)</span>

<span class="token comment">// 插入子元素</span>
parentElement<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newElement<span class="token punctuation">,</span> referenceElement<span class="token punctuation">)</span>

对于 <span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法举个例子：

<span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">&quot;ul&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>

<span class="token keyword">var</span> newEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> textNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&#39;insertNode&#39;</span><span class="token punctuation">)</span>
newEle<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>textNode<span class="token punctuation">)</span>
<span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span>
ul<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newEle<span class="token punctuation">,</span> ul<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span>

<span class="token comment">// 页面输出</span>
insertNode
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
</code></pre><h3 id="dom-查询" tabindex="-1"><a class="header-anchor" href="#dom-查询"><span>DOM 查询</span></a></h3><p>元素查询的 API 返回的的结果是 DOM 节点或者 DOM 节点的列表</p><pre><code class="language-js"><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// querySelector()方法返回匹配指定CSS选择器元素的第一个子元素， 该方法只返回匹配指定选择器的第一个元素。如果要返回所有匹配元素，需要使用querySelectorAll()方法替代．</span>
<span class="token comment">// document.querySelector(&quot;#test&quot;); // 获取到id名为test的首个元素</span>
</code></pre><p>*<strong>querySelector系列方法与getElementBy系列方法对比</strong></p><ol><li>得到的元素不是需要很麻烦的多次 getElementBy..的话，尽量使用getElementBy系列方法,因为getElementBy系列执行速度更快。</li><li>得到的元素需要很麻烦的多次getElementBy...组合才能得到的话使用querySelector方便。</li><li>querySelector()选择的标签是静态的，也就是说在选中之后，能够一直保存，也就是脱离了被选择的成为副本。而getelementsBy系列方法是动态的，相互映射，在调用时，变化可以及时的反映在页面上。</li></ol><pre><code class="language-js"><span class="token comment">// 用 querySelector 操作元素</span>
<span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> list <span class="token operator">=</span> ul<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建3个新的li标签，添加到ul列表中</span>
  ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 3</span>
<span class="token comment">// 输出的是添加前li的数量3，而非此时li的总数量6</span>

<span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> list <span class="token operator">=</span> ul<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建3个新的li标签，添加到ul列表中</span>
  ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 6</span>
</code></pre><h3 id="元素的-dom-导航方法" tabindex="-1"><a class="header-anchor" href="#元素的-dom-导航方法"><span>元素的 DOM 导航方法</span></a></h3><pre><code class="language-js"><span class="token comment">// 获取父元素、父节点</span>
<span class="token keyword">var</span> parent <span class="token operator">=</span> ele<span class="token punctuation">.</span>parentElement
<span class="token keyword">var</span> parent <span class="token operator">=</span> ele<span class="token punctuation">.</span>parentNode
<span class="token comment">// 获取子节点，子节点可以是任何一种节点，可以通过nodeType来判断</span>
<span class="token keyword">var</span> nodes <span class="token operator">=</span> ele<span class="token punctuation">.</span>children
<span class="token comment">// 查询子元素</span>
<span class="token keyword">var</span> els <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> els <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 当前元素的第一个/最后一个子元素节点</span>
<span class="token keyword">var</span> el <span class="token operator">=</span> ele<span class="token punctuation">.</span>firstElementChild
<span class="token keyword">var</span> el <span class="token operator">=</span> ele<span class="token punctuation">.</span>lastElementChild
<span class="token comment">// 下一个/上一个兄弟元素节点</span>

<span class="token keyword">var</span> el <span class="token operator">=</span> ele<span class="token punctuation">.</span>nextElementSibling
<span class="token keyword">var</span> el <span class="token operator">=</span> ele<span class="token punctuation">.</span>previousElementSibling
</code></pre><h3 id="属性操作" tabindex="-1"><a class="header-anchor" href="#属性操作"><span>属性操作</span></a></h3><pre><code class="language-js"><span class="token function">getAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span>
<span class="token function">hasAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token function">removeAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
</code></pre>`,25),o=[p];function c(l,u){return s(),a("div",null,o)}const i=n(e,[["render",c],["__file","yuanshengJavaScript DOMcaozuochangjianhuizong.html.vue"]]),k=JSON.parse('{"path":"/blogs/technology/JS/yuanshengJavaScript DOMcaozuochangjianhuizong.html","title":"原生 JavaScript DOM 操作常见汇总","lang":"en-US","frontmatter":{"title":"原生 JavaScript DOM 操作常见汇总","date":"2024/07/01","tags":["javascript"],"categories":["javascript"]},"headers":[{"level":2,"title":"创建新节点","slug":"创建新节点","link":"#创建新节点","children":[{"level":3,"title":"createDocumentFragment()","slug":"createdocumentfragment","link":"#createdocumentfragment","children":[]},{"level":3,"title":"createElement()","slug":"createelement","link":"#createelement","children":[]},{"level":3,"title":"区别","slug":"区别","link":"#区别","children":[]},{"level":3,"title":"createTextNode()方法","slug":"createtextnode-方法","link":"#createtextnode-方法","children":[]},{"level":3,"title":"DOM 更改：添加、移除、替换、插入","slug":"dom-更改-添加、移除、替换、插入","link":"#dom-更改-添加、移除、替换、插入","children":[]},{"level":3,"title":"DOM 查询","slug":"dom-查询","link":"#dom-查询","children":[]},{"level":3,"title":"元素的 DOM 导航方法","slug":"元素的-dom-导航方法","link":"#元素的-dom-导航方法","children":[]},{"level":3,"title":"属性操作","slug":"属性操作","link":"#属性操作","children":[]}]}],"git":{"createdTime":1719836602000,"updatedTime":1719836602000,"contributors":[{"name":"zhuxiaoying","email":"zhuxiaoying@meituan.com","commits":1}]},"filePathRelative":"blogs/technology/JS/原生JavaScript DOM操作常见汇总.md"}');export{i as comp,k as data};
